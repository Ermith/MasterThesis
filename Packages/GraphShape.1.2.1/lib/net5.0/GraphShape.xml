<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphShape</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:GraphShape.Algorithms.AlgorithmBase">
            <summary>
            Base class for all algorithm.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.AlgorithmBase.IsCancelling">
            <summary>
            Gets a value indicating if a cancellation request is pending.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.AlgorithmBase.ThrowIfCancellationRequested">
            <summary>
            Throws if a cancellation of the algorithm was requested.
            </summary>
            <exception cref="T:System.OperationCanceledException">If the algorithm <see cref="P:GraphShape.Algorithms.AlgorithmBase.IsCancelling"/>.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.AlgorithmBase.SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.AlgorithmBase.State">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.AlgorithmBase.Compute">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.AlgorithmBase.Abort">
            <inheritdoc />
        </member>
        <member name="E:GraphShape.Algorithms.AlgorithmBase.StateChanged">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.AlgorithmBase.OnStateChanged(System.EventArgs)">
            <summary>
            Called on algorithm state changed.
            </summary>
            <param name="args"><see cref="F:EventArgs.Empty"/>.</param>
        </member>
        <member name="E:GraphShape.Algorithms.AlgorithmBase.Started">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.AlgorithmBase.OnStarted(System.EventArgs)">
            <summary>
            Called on algorithm start.
            </summary>
            <param name="args"><see cref="F:EventArgs.Empty"/>.</param>
        </member>
        <member name="E:GraphShape.Algorithms.AlgorithmBase.Finished">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.AlgorithmBase.OnFinished(System.EventArgs)">
            <summary>
            Called on algorithm finished.
            </summary>
            <param name="args"><see cref="F:EventArgs.Empty"/>.</param>
        </member>
        <member name="E:GraphShape.Algorithms.AlgorithmBase.Aborted">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.AlgorithmBase.OnAborted(System.EventArgs)">
            <summary>
            Called on algorithm abort.
            </summary>
            <param name="args"><see cref="F:EventArgs.Empty"/>.</param>
        </member>
        <member name="M:GraphShape.Algorithms.AlgorithmBase.Initialize">
            <summary>
            Called on algorithm initialization step.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.AlgorithmBase.InternalCompute">
            <summary>
            Algorithm compute step.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.AlgorithmBase.Clean">
            <summary>
            Called on algorithm cleanup step.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.EdgeRouting.EdgeRoutingAlgorithmBase`3">
            <summary>
            Base class for all edge routing algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="F:GraphShape.Algorithms.EdgeRouting.EdgeRoutingAlgorithmBase`3.VerticesPositions">
            <summary>
            Vertices positions associations.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.EdgeRouting.EdgeRoutingAlgorithmBase`3.EdgeRoutes">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.EdgeRouting.EdgeRoutingAlgorithmBase`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.EdgeRouting.EdgeRoutingAlgorithmBase`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesPositions"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.EdgeRouting.EdgeRoutingParameters">
            <summary>
            Edge routing algorithm parameters.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.EdgeRouting.EdgeRoutingParameters.Clone">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.EdgeRouting.StandardEdgeRoutingAlgorithmFactory`3">
            <summary>
            Dummy implementation of edge routing algorithm factory.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.EdgeRouting.StandardEdgeRoutingAlgorithmFactory`3.AlgorithmTypes">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.EdgeRouting.StandardEdgeRoutingAlgorithmFactory`3.CreateAlgorithm(System.String,GraphShape.Algorithms.Layout.ILayoutContext{`0,`1,`2},GraphShape.Algorithms.EdgeRouting.IEdgeRoutingParameters)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.EdgeRouting.StandardEdgeRoutingAlgorithmFactory`3.CreateParameters(System.String,GraphShape.Algorithms.EdgeRouting.IEdgeRoutingParameters)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.EdgeRouting.StandardEdgeRoutingAlgorithmFactory`3.IsValidAlgorithm(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.EdgeRouting.StandardEdgeRoutingAlgorithmFactory`3.GetAlgorithmType(GraphShape.Algorithms.EdgeRouting.IEdgeRoutingAlgorithm{`0,`1,`2})">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.EdgeRouting.IEdgeRoutingAlgorithm`3">
            <summary>
            Represents an edge routing algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.EdgeRouting.IEdgeRoutingAlgorithm`3.EdgeRoutes">
            <summary>
            The routing points of the edges (routes).
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.EdgeRouting.IEdgeRoutingAlgorithmFactory`3">
            <summary>
            Represents a factory of edge routing algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.EdgeRouting.IEdgeRoutingAlgorithmFactory`3.AlgorithmTypes">
            <summary>
            The set of available algorithms.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.EdgeRouting.IEdgeRoutingAlgorithmFactory`3.CreateAlgorithm(System.String,GraphShape.Algorithms.Layout.ILayoutContext{`0,`1,`2},GraphShape.Algorithms.EdgeRouting.IEdgeRoutingParameters)">
            <summary>
            Creates an algorithm corresponding to given <paramref name="algorithmType"/>,
            <paramref name="context"/> and <paramref name="parameters"/>.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <param name="context">Creation context.</param>
            <param name="parameters">Algorithm parameters.</param>
            <returns>Created algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithmType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.EdgeRouting.IEdgeRoutingAlgorithmFactory`3.CreateParameters(System.String,GraphShape.Algorithms.EdgeRouting.IEdgeRoutingParameters)">
            <summary>
            Creates algorithm parameters for an algorithm of given <paramref name="algorithmType"/>
            and <paramref name="parameters"/>.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <param name="parameters">Algorithm parameters.</param>
            <returns>Parameters for the algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithmType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.EdgeRouting.IEdgeRoutingAlgorithmFactory`3.IsValidAlgorithm(System.String)">
            <summary>
            Checks if the given <paramref name="algorithmType"/> is a valid one.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <returns>True if the algorithm type is valid, false otherwise.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.EdgeRouting.IEdgeRoutingAlgorithmFactory`3.GetAlgorithmType(GraphShape.Algorithms.EdgeRouting.IEdgeRoutingAlgorithm{`0,`1,`2})">
            <summary>
            Gets the algorithm type from a given <paramref name="algorithm"/>.
            </summary>
            <param name="algorithm">Algorithm to get its type.</param>
            <returns>Algorithm type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithm"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.EdgeRouting.IEdgeRoutingParameters">
            <summary>
            Represents edge routing algorithm parameters.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.FactoryHelpers">
            <summary>
            Helpers to create layout parameters sets.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.FactoryHelpers.CreateNewParameters``1(GraphShape.Algorithms.IAlgorithmParameters)">
            <summary>
            Creates a new set of algorithm parameters.
            Clones given <paramref name="parameters"/> if possible, creates default otherwise.
            </summary>
            <typeparam name="TParam">Parameter type.</typeparam>
            <param name="parameters">Set of parameters.</param>
            <returns>Created set of parameters.</returns>
        </member>
        <member name="T:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4">
            <summary>
            Base class for all highlight algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <typeparam name="TParameters">Algorithm parameters type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.Controller">
            <summary>
            Highlight controller.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.GraphShape#Algorithms#Highlight#IHighlightAlgorithm{TVertex,TEdge}#Parameters">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.Parameters">
            <inheritdoc cref="P:GraphShape.Algorithms.Highlight.IHighlightAlgorithm`2.Parameters"/>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.#ctor(GraphShape.Algorithms.Highlight.IHighlightController{`0,`1,`2},GraphShape.Algorithms.Highlight.IHighlightParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4"/> class.
            </summary>
            <param name="controller">Highlight controller.</param>
            <param name="parameters">Highlight algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.ResetHighlight">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.OnVertexHighlighting(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.OnVertexHighlightRemoving(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.OnEdgeHighlighting(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.OnEdgeHighlightRemoving(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.IsParametersSettable(GraphShape.Algorithms.Highlight.IHighlightParameters)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.TrySetParameters(GraphShape.Algorithms.Highlight.IHighlightParameters)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightAlgorithmBase`4.OnParametersChanged">
            <summary>
            Called each time a parameter property changed.
            Resets highlight.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Highlight.HighlightContext`3">
            <summary>
            Base class for all highlight context.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.HighlightContext`3.Graph">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightContext`3.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Highlight.HighlightContext`3"/> class.
            </summary>
            <param name="graph">Target graph.</param>
        </member>
        <member name="T:GraphShape.Algorithms.Highlight.HighlightParameters">
            <summary>
            Base class for highlight algorithm parameters.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.HighlightParameters.Clone">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Highlight.SimpleHighlightAlgorithm`3">
            <summary>
            Simple highlight algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.SimpleHighlightAlgorithm`3.#ctor(GraphShape.Algorithms.Highlight.IHighlightController{`0,`1,`2},GraphShape.Algorithms.Highlight.IHighlightParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Highlight.SimpleHighlightAlgorithm`3"/> class.
            </summary>
            <param name="controller">Highlight controller.</param>
            <param name="parameters">Highlight algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.SimpleHighlightAlgorithm`3.ResetHighlight">
            <summary>
            Resets the semi-highlights according to the actually
            highlighted vertices/edges.
            
            This method should be called if the graph changed,
            or the highlights should be reset.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.SimpleHighlightAlgorithm`3.OnVertexHighlighting(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.SimpleHighlightAlgorithm`3.OnVertexHighlightRemoving(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.SimpleHighlightAlgorithm`3.OnEdgeHighlighting(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.SimpleHighlightAlgorithm`3.OnEdgeHighlightRemoving(`1)">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Highlight.StandardHighlightAlgorithmFactory`3">
            <summary>
            Simple implementation of an highlight algorithm factory.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.StandardHighlightAlgorithmFactory`3.HighlightModes">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.StandardHighlightAlgorithmFactory`3.CreateAlgorithm(System.String,GraphShape.Algorithms.Highlight.IHighlightContext{`0,`1,`2},GraphShape.Algorithms.Highlight.IHighlightController{`0,`1,`2},GraphShape.Algorithms.Highlight.IHighlightParameters)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.StandardHighlightAlgorithmFactory`3.CreateParameters(System.String,GraphShape.Algorithms.Highlight.IHighlightParameters)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.StandardHighlightAlgorithmFactory`3.IsValidMode(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.StandardHighlightAlgorithmFactory`3.GetHighlightMode(GraphShape.Algorithms.Highlight.IHighlightAlgorithm{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Highlight.IHighlightAlgorithm`2">
            <summary>
            Represents a graph highlighting algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.IHighlightAlgorithm`2.Parameters">
            <summary>
            Highlight parameters.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithm`2.ResetHighlight">
            <summary>
            Resets the whole highlight.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithm`2.OnVertexHighlighting(`0)">
            <summary>
            Asks to highlight the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to highlight.</param>
            <returns>True if the <paramref name="vertex"/> was highlighted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithm`2.OnVertexHighlightRemoving(`0)">
            <summary>
            Asks to remove the highlighting of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to remove its highlighting.</param>
            <returns>True if the <paramref name="vertex"/> highlight was removed, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithm`2.OnEdgeHighlighting(`1)">
            <summary>
            Asks to highlight the given <paramref name="edge"/>.
            </summary>
            <param name="edge">Edge to highlight.</param>
            <returns>True if the <paramref name="edge"/> was highlighted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithm`2.OnEdgeHighlightRemoving(`1)">
            <summary>
            Asks to remove the highlighting of the given <paramref name="edge"/>.
            </summary>
            <param name="edge">Edge to remove its highlighting.</param>
            <returns>True if the <paramref name="edge"/> highlight was removed, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithm`2.IsParametersSettable(GraphShape.Algorithms.Highlight.IHighlightParameters)">
            <summary>
            Checks if given highlight algorithm <paramref name="parameters"/>
            can be set to this highlight algorithm.
            </summary>
            <param name="parameters">Highlight parameters to check.</param>
            <returns>True if parameters can be set, false otherwise.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithm`2.TrySetParameters(GraphShape.Algorithms.Highlight.IHighlightParameters)">
            <summary>
            Tries to set the given highlight algorithm <paramref name="parameters"/>.
            </summary>
            <param name="parameters">Highlight parameters to set.</param>
            <returns>True if parameters were set, false otherwise.</returns>
        </member>
        <member name="T:GraphShape.Algorithms.Highlight.IHighlightAlgorithmFactory`3">
            <summary>
            Represents a factory of highlight algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.IHighlightAlgorithmFactory`3.HighlightModes">
            <summary>
            Highlight modes.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithmFactory`3.CreateAlgorithm(System.String,GraphShape.Algorithms.Highlight.IHighlightContext{`0,`1,`2},GraphShape.Algorithms.Highlight.IHighlightController{`0,`1,`2},GraphShape.Algorithms.Highlight.IHighlightParameters)">
            <summary>
            Creates an algorithm corresponding using given <paramref name="highlightMode"/>,
            <paramref name="context"/>, <paramref name="controller"/> and <paramref name="parameters"/>.
            </summary>
            <param name="highlightMode">Highlight mode.</param>
            <param name="context">Creation context.</param>
            <param name="controller">Highlight controller.</param>
            <param name="parameters">Algorithm parameters.</param>
            <returns>Created algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="highlightMode"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="controller"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithmFactory`3.CreateParameters(System.String,GraphShape.Algorithms.Highlight.IHighlightParameters)">
            <summary>
            Creates algorithm parameters for an algorithm using given <paramref name="highlightMode"/>
            and <paramref name="parameters"/>.
            </summary>
            <param name="highlightMode">Highlight mode.</param>
            <param name="parameters">Algorithm parameters.</param>
            <returns>Parameters for the algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="highlightMode"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithmFactory`3.IsValidMode(System.String)">
            <summary>
            Checks if the given <paramref name="mode"/> is a valid one.
            </summary>
            <param name="mode">Highlight mode.</param>
            <returns>True if the highlight mode is valid, false otherwise.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightAlgorithmFactory`3.GetHighlightMode(GraphShape.Algorithms.Highlight.IHighlightAlgorithm{`0,`1})">
            <summary>
            Gets the algorithm highlight mode from a given <paramref name="algorithm"/>.
            </summary>
            <param name="algorithm">Algorithm from which getting highlight mode.</param>
            <returns>Highlight mode.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithm"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.Highlight.IHighlightContext`3">
            <summary>
            Represents a graph highlighting context.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.IHighlightContext`3.Graph">
            <summary>
            Graph concerned by the highlighting.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Highlight.IHighlightController`3">
            <summary>
            Represents an highlight controller.
            Able to set/remove highlight, check highlighting of entity.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.IHighlightController`3.Graph">
            <summary>
            Graph concerned by the highlighting.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.IHighlightController`3.HighlightedVertices">
            <summary>
            Set of highlighted vertices.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.IHighlightController`3.SemiHighlightedVertices">
            <summary>
            Set of semi-highlighted vertices.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.IHighlightController`3.HighlightedEdges">
            <summary>
            Set of highlighted edges.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Highlight.IHighlightController`3.SemiHighlightedEdges">
            <summary>
            Set of semi-highlighted edges.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.IsHighlightedVertex(`0)">
            <summary>
            Checks if the given <paramref name="vertex"/> is highlighted.
            </summary>
            <param name="vertex">Vertex to check.</param>
            <returns>True if the <paramref name="vertex"/> is highlighted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.IsHighlightedVertex(`0,System.Object@)">
            <summary>
            Checks if the given <paramref name="vertex"/> is highlighted.
            It highlighted, provides additional <paramref name="highlightInfo"/>.
            </summary>
            <param name="vertex">Vertex to check.</param>
            <param name="highlightInfo">Additional highlight information.</param>
            <returns>True if the <paramref name="vertex"/> is highlighted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.IsSemiHighlightedVertex(`0)">
            <summary>
            Checks if the given <paramref name="vertex"/> is semi-highlighted.
            </summary>
            <param name="vertex">Vertex to check.</param>
            <returns>True if the <paramref name="vertex"/> is semi-highlighted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.IsSemiHighlightedVertex(`0,System.Object@)">
            <summary>
            Checks if the given <paramref name="vertex"/> is semi-highlighted.
            It semi-highlighted, provides additional <paramref name="semiHighlightInfo"/>.
            </summary>
            <param name="vertex">Vertex to check.</param>
            <param name="semiHighlightInfo">Additional semi-highlight information.</param>
            <returns>True if the <paramref name="vertex"/> is semi-highlighted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.IsHighlightedEdge(`1)">
            <summary>
            Checks if the given <paramref name="edge"/> is highlighted.
            </summary>
            <param name="edge">Edge to check.</param>
            <returns>True if the <paramref name="edge"/> is highlighted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.IsHighlightedEdge(`1,System.Object@)">
            <summary>
            Checks if the given <paramref name="edge"/> is highlighted.
            It semi-highlighted, provides additional <paramref name="highlightInfo"/>.
            </summary>
            <param name="edge">Edge to check.</param>
            <param name="highlightInfo">Additional highlight information.</param>
            <returns>True if the <paramref name="edge"/> is highlighted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.IsSemiHighlightedEdge(`1)">
            <summary>
            Checks if the given <paramref name="edge"/> is semi-highlighted.
            </summary>
            <param name="edge">Edge to check.</param>
            <returns>True if the <paramref name="edge"/> is semi-highlighted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.IsSemiHighlightedEdge(`1,System.Object@)">
            <summary>
            Checks if the given <paramref name="edge"/> is semi-highlighted.
            It semi-highlighted, provides additional <paramref name="semiHighlightInfo"/>.
            </summary>
            <param name="edge">Edge to check.</param>
            <param name="semiHighlightInfo">Additional semi-highlight information.</param>
            <returns>True if the <paramref name="edge"/> is semi-highlighted, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.HighlightVertex(`0,System.Object)">
            <summary>
            Asks to highlight the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to highlight.</param>
            <param name="highlightInfo">Additional highlight information.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.SemiHighlightVertex(`0,System.Object)">
            <summary>
            Asks to semi-highlight the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to highlight.</param>
            <param name="semiHighlightInfo">Additional semi-highlight information.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.HighlightEdge(`1,System.Object)">
            <summary>
            Asks to highlight the given <paramref name="edge"/>.
            </summary>
            <param name="edge">Edge to highlight.</param>
            <param name="highlightInfo">Additional highlight information.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.SemiHighlightEdge(`1,System.Object)">
            <summary>
            Asks to semi-highlight the given <paramref name="edge"/>.
            </summary>
            <param name="edge">Edge to semi-highlight.</param>
            <param name="semiHighlightInfo">Additional semi-highlight information.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.RemoveHighlightFromVertex(`0)">
            <summary>
            Removes the highlight of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex from which removing highlight.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.RemoveSemiHighlightFromVertex(`0)">
            <summary>
            Removes the semi-highlight of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex from which removing semi-highlight.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.RemoveHighlightFromEdge(`1)">
            <summary>
            Removes the highlight of the given <paramref name="edge"/>.
            </summary>
            <param name="edge">Edge from which removing highlight.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Highlight.IHighlightController`3.RemoveSemiHighlightFromEdge(`1)">
            <summary>
            Removes the semi-highlight of the given <paramref name="edge"/>.
            </summary>
            <param name="edge">Edge from which removing highlight.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.Highlight.IHighlightParameters">
            <summary>
            Represents highlight algorithm parameters.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2">
            <summary>
            Algorithm that sorts vertices by layer.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.LayerIndices">
            <summary>
            This dictionary contains the layer-index for every vertices.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.LayerCount">
            <summary>
            The count of the layers in the graph.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.Layers">
            <summary>
            The vertices grouped by their LayerIndex.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.LayerFinishedDelegate">
            <summary>
            Handler for <see cref="E:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.LayerFinished"/> event.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="E:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.LayerFinished">
            <summary>
            Fired each time a layer is treated and finished.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.#ctor(QuikGraph.IVertexAndEdgeListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2"/> class.
            </summary>
            <param name="visitedGraph">Graph to visit.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.LayeredTopologicalSortEventArgs">
            <summary>
            Event arguments for a layered topological sort algorithm.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.LayeredTopologicalSortEventArgs.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.LayeredTopologicalSortEventArgs"/> class.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.LayeredTopologicalSortEventArgs.LayerIndex">
            <summary>
            Layer index.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.LayeredTopologicalSortAlgorithm`2.LayeredTopologicalSortEventArgs.Vertices">
            <summary>
            Layer vertices.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.CompoundLayoutContext`3">
            <summary>
            Compound graph layout context.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundLayoutContext`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size},GraphShape.Algorithms.Layout.LayoutMode,System.Collections.Generic.IDictionary{`0,GraphShape.Thickness},System.Collections.Generic.IDictionary{`0,GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.CompoundLayoutContext`3"/> class.
            </summary>
            <param name="graph">Graph to layout.</param>
            <param name="positions">Vertices positions.</param>
            <param name="sizes">Vertices sizes.</param>
            <param name="mode">Layout mode.</param>
            <param name="verticesBorders">Vertices borders.</param>
            <param name="layoutTypes">Layout types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sizes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesBorders"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="layoutTypes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundLayoutContext`3.VerticesBorders">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundLayoutContext`3.LayoutTypes">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.CompoundLayoutIterationEventArgs`2">
            <summary>
            Information on a compound layout algorithm iteration.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundLayoutIterationEventArgs`2.#ctor(System.Int32,System.Double,System.String,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.CompoundLayoutIterationEventArgs`2"/> class.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <param name="message">Message representing the status of the algorithm.</param>
            <param name="verticesPositions">Vertices positions associations.</param>
            <param name="innerCanvasSizes">Inner canvas vertices sizes associations.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerCanvasSizes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundLayoutIterationEventArgs`2.InnerCanvasSizes">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType">
            <summary>
            Enumeration of possible vertex inner layout type.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType.Automatic">
            <summary>
            Automatic layout.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType.ContextFree">
            <summary>
            Context free layout.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType.Contextual">
            <summary>
            Contextual layout.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType.Fixed">
            <summary>
            Fixed layout.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3">
            <summary>
            Compound FDP layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._phase">
            <summary>
            Phase of the layout process.
            Values: 1,2,3.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._step">
            <summary>
            The steps in the actual phase.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._maxIterationCounts">
            <summary>
            The maximum number of iteration in the phases.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.AllTreesGrown">
            <summary>
            Indicates whether the removed tree-node
            has been grown back or not.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.TreeGrowingStep">
            <summary>
            Grows back a tree-node level in every 'treeGrowingStep'th step.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._gravityForceMagnitude">
            <summary>
            The magnitude of the gravity force calculated in the init phased.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._gravityCenterCalculated">
            <summary>
            Has been the gravity center initiated or not.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.Initialize">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.ApplySpringForces">
            <summary>
            Applies the attraction forces (between the end nodes of the edges).
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.ApplyRepulsionForces">
            <summary>
            Applies the repulsion forces between every node-pair.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.ApplyGravitationForces">
            <summary>
            Applies the gravitation forces.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.ApplyApplicationSpecificForces">
            <summary>
            Applies the application specific forces to the vertices.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._compoundVerticesData">
            <summary>
            Information for compound vertices.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._verticesData">
            <summary>
            Information for all kind of vertices.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.Levels">
            <summary>
            The levels of the graph (generated by the containment associations).
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._removedRootTreeNodeLevels">
            <summary>
            The list of the removed root-tree-nodes and edges by it's level
            (level = distance from the closest not removed node).
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._verticesSizes">
            <summary>
            The dictionary of the initial vertices sizes.
            </summary>
            <remarks>Do not use it after initialization.</remarks>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._verticesBorders">
            <summary>
            The dictionary of the vertices borders.
            </summary>
            <remarks>Do not use it after initialization.</remarks>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._layoutTypes">
            <summary>
            The dictionary of the layout types of the compound vertices.
            </summary>
            <remarks>Do not use it after initialization.</remarks>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._rootCompoundVertex">
            <summary>
            Represents the root vertex.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Size},System.Collections.Generic.IDictionary{`0,GraphShape.Thickness},System.Collections.Generic.IDictionary{`0,GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType},GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="verticesBorders">Vertices borders.</param>
            <param name="layoutTypes">Layout types per vertex.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesSizes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesBorders"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="layoutTypes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size},System.Collections.Generic.IDictionary{`0,GraphShape.Thickness},System.Collections.Generic.IDictionary{`0,GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType},GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="verticesBorders">Vertices borders.</param>
            <param name="layoutTypes">Layout types per vertex.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesSizes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesBorders"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="layoutTypes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.LevelOfVertex(`0)">
            <summary>
            Gets the level of a given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get its level.</param>
            <returns>Vertex level.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException">
            <paramref name="vertex"/> is not part of the <see cref="P:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.VisitedGraph"/>.
            </exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.InnerCanvasSizes">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData">
            <summary>
            Data for the simple vertices.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.Vertex">
            <summary>
            Gets the vertex which is wrapped by this object.
            Can be <see langword="null"/> for the root vertex.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.Parent">
            <summary>
            Parent compound vertex.
            </summary>
            <remarks>
            Should be not <see langword="null"/> except for root compound vertex
            (<see cref="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3._rootCompoundVertex"/>.
            </remarks>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.#ctor(`0,GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm{`0,`1,`2}.VertexData,System.Boolean,GraphShape.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData"/> class.
            </summary>
            <param name="vertex">Target vertex.</param>
            <param name="movableParent">Moveable parent vertex data.</param>
            <param name="isFixedToParent">Indicates if the vertex position is fixed to its parent.</param>
            <param name="position">Vertex position.</param>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.MovableParent">
            <summary>
            If the vertex is fixed (cannot be moved), that's it's parent
            that could be moved (if there's any).
            
            This property can only be set once.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.IsFixedToParent">
            <summary>
            Gets or sets that the position of the vertex is fixed to
            it's parent vertex or not.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.Size">
            <summary>
            Gets the actual size of the vertex (inner size + border + anything else...).
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.Level">
            <summary>
            The level of the vertex inside the graph.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.Position">
            <summary>
            The position of the vertex.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.SpringForce">
            <summary>
            Gets or sets the spring force.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.RepulsionForce">
            <summary>
            Gets or sets the repulsion force.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.GravitationForce">
            <summary>
            Gets or sets the gravitation force.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.ApplicationForce">
            <summary>
            Gets or sets the spring force.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.VertexData.ApplyForce(System.Double)">
            <summary>
            Applies forces on the wrapped vertex (bound to <paramref name="limit"/>).
            </summary>
            <returns>Computed force.</returns>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.SimpleVertexData.Size">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.SimpleVertexData.ApplyForce(GraphShape.Vector)">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData">
            <summary>
            Data for the compound vertices.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData.Borders">
            <summary>
            The thickness of the borders of the compound vertex.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData.InnerVertexLayoutType">
            <summary>
            Gets the layout type of the compound vertex.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData.#ctor(`0,GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm{`0,`1,`2}.VertexData,System.Boolean,GraphShape.Point,GraphShape.Size,GraphShape.Thickness,GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData"/> class.
            </summary>
            <param name="vertex">Target vertex.</param>
            <param name="movableParent">Moveable parent vertex data.</param>
            <param name="isFixedToParent">Indicates if the vertex position is fixed to its parent.</param>
            <param name="position">Vertex position.</param>
            <param name="size">Vertex size.</param>
            <param name="borders">Vertex borders.</param>
            <param name="innerVertexLayoutType">Vertex layout type.</param>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData.Size">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData.InnerCanvasSize">
            <summary>
            The size of the inner canvas of the compound vertex.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData.ApplyForce(GraphShape.Vector)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData.PropagateToChildren(GraphShape.Vector)">
            <summary>
            Modifies the position of the children with the given <paramref name="force"/>.
            </summary>
            <param name="force">The vector of the position modification.</param>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData.Children">
            <summary>
            Children vertices data.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData.InnerCanvasCenter">
            <summary>
            Gets or sets the inner canvas center position.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.CompoundVertexData.RecalculateBounds">
            <summary>
            Recompute vertex bounds.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.Init(System.Collections.Generic.IDictionary{`0,GraphShape.Size},System.Collections.Generic.IDictionary{`0,GraphShape.Thickness},System.Collections.Generic.IDictionary{`0,GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType})">
            <summary>
            Initializes the algorithm, and the following things:
            
            - The nodes sizes (of the compound vertices)
            - The thresholds for the convergence
            - Random initial positions (if the position is not null)
            - Remove the 'tree-nodes' from the root graph (level 0)
            </summary>
            <param name="verticesSizes">The dictionary of the inner canvas sizes of the compound vertices.</param>
            <param name="verticesBorders">The dictionary of the border thickness of the compound vertices.</param>
            <param name="layoutTypes">The dictionary of the layout types of the compound vertices.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.InitSimpleVertices(System.Collections.Generic.IDictionary{`0,GraphShape.Size})">
            <summary>
            Initializes the data of the simple vertices.
            </summary>
            <param name="verticesSizes">Dictionary of the vertex sizes.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutAlgorithm`3.InitCompoundVertices(System.Collections.Generic.IDictionary{`0,GraphShape.Thickness},System.Collections.Generic.IDictionary{`0,GraphShape.Size},System.Collections.Generic.IDictionary{`0,GraphShape.Algorithms.Layout.CompoundVertexInnerLayoutType},System.Collections.Generic.Queue{`0})">
            <summary>
            Initializes the data of the compound vertices.
            </summary>
            <param name="verticesBorders">Dictionary of the vertices border thicknesses.</param>
            <param name="verticesSizes">Dictionary of the vertices sizes.</param>
            <param name="layoutTypes">Dictionary of the layout types.</param>
            <param name="movableParentUpdateQueue">
            The compound vertices with fixed layout should be added to this queue.
            </param>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters">
            <summary>
            Compound FDP layout algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.IdealEdgeLength">
            <summary>
            Ideal edge length.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.ElasticConstant">
            <summary>
            Elastic constant for the edges.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.RepulsionConstant">
            <summary>
            Repulsion constant for the node-node repulsion.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.NestingFactor">
            <summary>
            Factor of the ideal edge length for the inter-graph edges.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.GravitationFactor">
            <summary>
            Factor of the gravitation.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.Phase1Iterations">
            <summary>
            Maximum iterations for phase 1.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.Phase2Iterations">
            <summary>
            Maximum iterations for phase 2.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.Phase3Iterations">
            <summary>
            Maximum iterations for phase 3.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.Phase2TemperatureInitialMultiplier">
            <summary>
            Initial multiplier for phase 2 temperature.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.Phase3TemperatureInitialMultiplier">
            <summary>
            Initial multiplier for phase 3 temperature.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.TemperatureDecreasing">
            <summary>
            Temperature decreasing factor.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.DisplacementLimitMultiplier">
            <summary>
            Displacement limit multiplier.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.SeparationMultiplier">
            <summary>
            Separation multiplier.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CompoundFDPLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ICompoundLayoutAlgorithm`3">
            <summary>
            Represents a compound layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ICompoundLayoutAlgorithm`3.InnerCanvasSizes">
            <summary>
            Inner canvas vertices sizes.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ICompoundLayoutContext`3">
            <summary>
            Represents a compound graph layout context.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ICompoundLayoutContext`3.VerticesBorders">
            <summary>
            Vertices borders.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ICompoundLayoutContext`3.LayoutTypes">
            <summary>
            Layout types per vertex.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ICompoundLayoutIterationEventArgs`1">
            <summary>
            Represents a compound layout iteration event arguments.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ICompoundLayoutIterationEventArgs`1.InnerCanvasSizes">
            <summary>
            Inner canvas vertices sizes.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.TestingCompoundLayoutIterationEventArgs`4">
            <summary>
            Information on a compound layout algorithm iteration.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TVertexInfo">Vertex information type.</typeparam>
            <typeparam name="TEdgeInfo">Edge information type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.TestingCompoundLayoutIterationEventArgs`4.GravitationCenter">
            <summary>
            Gravitation center position.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.TestingCompoundLayoutIterationEventArgs`4.#ctor(System.Int32,System.Double,System.String,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size},System.Collections.Generic.IDictionary{`0,`2},GraphShape.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.TestingCompoundLayoutIterationEventArgs`4"/> class.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <param name="message">Message representing the status of the algorithm.</param>
            <param name="verticesPositions">Vertices positions associations.</param>
            <param name="innerCanvasSizes">Inner canvas vertices sizes associations.</param>
            <param name="verticesInfos">Extra vertices information.</param>
            <param name="gravitationCenter">Gravitation center.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="innerCanvasSizes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesInfos"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.TestingCompoundLayoutIterationEventArgs`4.VerticesInfos">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.TestingCompoundLayoutIterationEventArgs`4.EdgesInfos">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.TestingCompoundLayoutIterationEventArgs`4.GetVertexInfo(`0)">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.TestingCompoundVertexInfo">
            <summary>
            Compound vertex extra information.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.TestingCompoundVertexInfo.#ctor(GraphShape.Vector,GraphShape.Vector,GraphShape.Vector,GraphShape.Vector)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.TestingCompoundVertexInfo"/> class.
            </summary>
            <param name="springForce">Spring force.</param>
            <param name="repulsionForce">Repulsion force.</param>
            <param name="gravityForce">Gravity force.</param>
            <param name="applicationForce">Application force.</param>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.TestingCompoundVertexInfo.SpringForce">
            <summary>
            Spring force.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.TestingCompoundVertexInfo.RepulsionForce">
            <summary>
            Repulsion force.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.TestingCompoundVertexInfo.GravityForce">
            <summary>
            Gravity force.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.TestingCompoundVertexInfo.ApplicationForce">
            <summary>
            Application force.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutAlgorithmFactory`3">
            <summary>
            Implementation of a contextual layout algorithm factory.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutAlgorithmFactory`3.AlgorithmTypes">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutAlgorithmFactory`3.CreateAlgorithm(System.String,GraphShape.Algorithms.Layout.ILayoutContext{`0,`1,`2},GraphShape.Algorithms.Layout.ILayoutParameters)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException"><paramref name="context"/> is not a <see cref="T:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutContext`3"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutAlgorithmFactory`3.CreateParameters(System.String,GraphShape.Algorithms.Layout.ILayoutParameters)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutAlgorithmFactory`3.IsValidAlgorithm(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutAlgorithmFactory`3.GetAlgorithmType(GraphShape.Algorithms.Layout.ILayoutAlgorithm{`0,`1,`2})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutAlgorithmFactory`3.NeedEdgeRouting(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutAlgorithmFactory`3.NeedOverlapRemoval(System.String)">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutContext`3">
            <summary>
            Contextual graph layout context.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutContext`3.SelectedVertex">
            <summary>
            The selected vertex.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutContext`3.#ctor(`2,`0,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.Contextual.ContextualLayoutContext`3"/> class.
            </summary>
            <param name="graph">Graph to layout.</param>
            <param name="selectedVertex">THe selected vertex.</param>
            <param name="positions">Vertices positions.</param>
            <param name="sizes">Vertices sizes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="selectedVertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sizes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutAlgorithm`3">
            <summary>
            Double tree layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Size},`0,GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <param name="selectedVertex">Root vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesSizes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selectedVertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="selectedVertex"/> is not part of <paramref name="visitedGraph"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size},`0,GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <param name="selectedVertex">Root vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesSizes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selectedVertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="selectedVertex"/> is not part of <paramref name="visitedGraph"/>.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutAlgorithm`3.DefaultParameters">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutAlgorithm`3.SeparateSides(`2,`0,System.Collections.Generic.HashSet{`0}@,System.Collections.Generic.HashSet{`0}@)">
            <summary>
            Separates the points of the graph according to the given <paramref name="splitVertex"/>.
            </summary>
            <param name="graph">Graph to split.</param>
            <param name="splitVertex">Split vertex.</param>
            <param name="side1">First side.</param>
            <param name="side2">Second side.</param>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutParameters">
            <summary>
            Double tree layout algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutParameters.Direction">
            <summary>
            The layout direction.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutParameters.VertexGap">
            <summary>
            Minimum gap between the neighbor vertices in a layer.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutParameters.LayerGap">
            <summary>
            Minimum gap between layers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.Contextual.DoubleTreeSides">
            <summary>
            Enumeration of possible side in <see cref="T:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutAlgorithm`3"/> algorithm.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.Contextual.DoubleTreeSides.Side1">
            <summary>
            Side 1.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.Contextual.DoubleTreeSides.Side2">
            <summary>
            Side 2.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.Contextual.DoubleTreeVertexType">
            <summary>
            ENumeration of possible vertex type for <see cref="T:GraphShape.Algorithms.Layout.Contextual.DoubleTreeLayoutAlgorithm`3"/> algorithm.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.Contextual.DoubleTreeVertexType.Backward">
            <summary>
            Backward.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.Contextual.DoubleTreeVertexType.Forward">
            <summary>
            Forward.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.Contextual.DoubleTreeVertexType.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.Contextual.IContextualLayoutAlgorithmFactory`3">
            <summary>
            Represents a factory of contextual layout algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3">
            <summary>
            Base class for all <see cref="T:GraphShape.Algorithms.Layout.ILayoutAlgorithm`3"/> implementations.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.VisitedGraph">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.VerticesPositions">
            <inheritdoc />
        </member>
        <member name="E:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.ProgressChanged">
            <inheritdoc />
        </member>
        <member name="E:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.IterationEnded">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.ReportOnProgressChangedNeeded">
            <summary>
            Indicates if there is any watcher on algorithm progress.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.ReportOnIterationEndNeeded">
            <summary>
            Indicates if there is any watcher on iterations ends.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.GetVertexInfo(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.GetEdgeInfo(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.OnProgressChanged(System.Double)">
            <summary>
            Called when some progress was made in layout algorithm.
            </summary>
            <param name="percent">New progress percentage.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.OnIterationEnded(GraphShape.Algorithms.Layout.ILayoutIterationEventArgs{`0})">
            <summary>
            Called when a layout iteration has ended.
            </summary>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5">
            <summary>
            Base class for all <see cref="T:GraphShape.Algorithms.Layout.ILayoutAlgorithm`5"/> implementations.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <typeparam name="TVertexInfo">Vertex information type.</typeparam>
            <typeparam name="TEdgeInfo">Edge information type.</typeparam>
        </member>
        <member name="E:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5.InfoIterationEnded">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5.ReportOnIterationEndNeeded">
            <summary>
            Indicates if there is any watcher on iterations ends.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5.VerticesInfos">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5.EdgesInfos">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5.GetVertexInfo(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5.GetEdgeInfo(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`5.RaiseIterationEnded(GraphShape.Algorithms.Layout.ILayoutIterationEventArgs{`0})">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutContext`3">
            <summary>
            Graph layout context.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutContext`3.Positions">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutContext`3.Sizes">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutContext`3.Graph">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutContext`3.Mode">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutContext`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size},GraphShape.Algorithms.Layout.LayoutMode)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutContext`3"/> class.
            </summary>
            <param name="graph">Graph to layout.</param>
            <param name="positions">Vertices positions.</param>
            <param name="sizes">Vertices sizes.</param>
            <param name="mode">Layout mode.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sizes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutDirection">
            <summary>
            Enumeration of possible layout directions.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.LayoutDirection.LeftToRight">
            <summary>
            Left to right direction.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.LayoutDirection.TopToBottom">
            <summary>
            Top to bottom direction.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.LayoutDirection.RightToLeft">
            <summary>
            Right to left direction.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.LayoutDirection.BottomToTop">
            <summary>
            Bottom to top direction.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2">
            <summary>
            Information on a layout algorithm iteration.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2"/> class.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.#ctor(System.Int32,System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2"/> class.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <param name="message">Message representing the status of the algorithm.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.#ctor(System.Int32,System.Double,System.Collections.Generic.IDictionary{`0,GraphShape.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2"/> class.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <param name="verticesPositions">Vertices positions associations.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.#ctor(System.Int32,System.Double,System.String,System.Collections.Generic.IDictionary{`0,GraphShape.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2"/> class.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <param name="message">Message representing the status of the algorithm.</param>
            <param name="verticesPositions">Vertices positions associations.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.StatusInPercent">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.Abort">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.Iteration">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.Message">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.VerticesPositions">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.GetVertexInfo(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`2.GetEdgeInfo(`1)">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4">
            <summary>
            Information on a layout algorithm iteration.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TVertexInfo">Vertex information type.</typeparam>
            <typeparam name="TEdgeInfo">Edge information type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4"/> class.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4.#ctor(System.Int32,System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4"/> class.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <param name="message">Message representing the status of the algorithm.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4.#ctor(System.Int32,System.Double,System.Collections.Generic.IDictionary{`0,GraphShape.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4"/> class.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <param name="verticesPositions">Vertices positions associations.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4.#ctor(System.Int32,System.Double,System.String,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,`2},System.Collections.Generic.IDictionary{`1,`3})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4"/> class.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <param name="message">Message representing the status of the algorithm.</param>
            <param name="verticesPositions">Vertices positions associations.</param>
            <param name="verticesInfos">Extra vertices information.</param>
            <param name="edgeInfos">Extra edges information.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4.VerticesInfos">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4.EdgesInfos">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4.GetVertexInfo(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutIterationEventArgs`4.GetEdgeInfo(`1)">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutMode">
            <summary>
            Enumeration of possible layout modes.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.LayoutMode.Simple">
            <summary>
            Simple layout mode without compound vertices.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.LayoutMode.Compound">
            <summary>
            Compound vertices, compound graph.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutParametersBase">
            <summary>
            Base class for all <see cref="T:GraphShape.Algorithms.Layout.ILayoutParameters"/> implementation.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutParametersBase.GetEqualityElements">
            <summary>
            Gets elements to take into account when comparing this <see cref="T:GraphShape.Algorithms.Layout.LayoutParametersBase"/>.
            </summary>
            <returns>Elements to compare.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutParametersBase.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutParametersBase.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutParametersBase.Clone">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutState`2">
            <summary>
            Layout iteration status.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutState`2.Positions">
            <summary>
            Gets the positions of every vertex in this state of the layout process.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutState`2.OverlapRemovedPositions">
            <summary>
            Gets the positions of every vertex after overlap removal
            in this state of the layout process.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutState`2.RouteInfos">
            <summary>
            Gets the edge routes in this state of the layout process.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutState`2.ComputationTime">
            <summary>
            Gets how much time did it take to compute the position of the vertices (till the end of this iteration).
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutState`2.Iteration">
            <summary>
            Gets the index of the iteration.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LayoutState`2.Message">
            <summary>
            Gets the status message of this layout state.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutState`2.#ctor(System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`1,GraphShape.Point[]},System.TimeSpan,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LayoutState`2"/> class.
            </summary>
            <param name="positions">Vertices positions.</param>
            <param name="overlapRemovedPositions">Vertices position after overlap removal.</param>
            <param name="routeInfos">Edge routes information.</param>
            <param name="computationTime">Iteration computation time.</param>
            <param name="iteration">Iteration number.</param>
            <param name="message">Iteration message.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="positions"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutUtils">
            <summary>
            Utilities for layout operations.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutUtils.FillWithRandomPositions``1(System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,GraphShape.Point},System.Random)">
            <summary>
            Initializes the positions of the vertices. Assigns a random position inside the 'bounding box' to the vertices without positions.
            It does NOT modify the position of the other vertices.
            Bounding box:
            x coordinates: <see cref="F:double.Epsilon"/> - <paramref name="width"/>
            y coordinates: <see cref="F:double.Epsilon"/> - <paramref name="height"/>
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="width">Width of the bounding box.</param>
            <param name="height">Height of the bounding box.</param>
            <param name="translateX">Translates the generated x coordinate.</param>
            <param name="translateY">Translates the generated y coordinate.</param>
            <param name="vertices">Vertices to fill positions.</param>
            <param name="verticesPositions">Initial vertices positions.</param>
            <param name="random">Random number generator to use.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutUtils.NormalizePositions``1(System.Collections.Generic.IDictionary{``0,GraphShape.Point})">
            <summary>
            Normalizes the given <paramref name="verticesPositions"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="verticesPositions">Vertices positions to normalize.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutUtils.IsSameDirection(GraphShape.Vector,GraphShape.Vector)">
            <summary>
            Checks if both <see cref="T:GraphShape.Vector"/>s have the same direction.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>True if both vectors have the same direction, false otherwise.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LayoutUtils.GetClippingPoint(GraphShape.Size,GraphShape.Point,GraphShape.Point)">
            <summary>
            Computes the clipping point based on clipping rectangle
            <paramref name="size"/> and two points (<paramref name="center"/> and <paramref name="p"/>)).
            </summary>
            <param name="size">Clipping zone size.</param>
            <param name="center">Center of the clipping zone.</param>
            <param name="p">Point to clip.</param>
            <returns>Clipping point.</returns>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4">
            <summary>
            Base class for all <see cref="T:GraphShape.Algorithms.Layout.ILayoutAlgorithm`3"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <typeparam name="TParameters">Parameters type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.Parameters">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.GetParameters">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},`3)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.DefaultParameters">
            <summary>
            Default algorithm parameters to use if no parameters provided at construction.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.InitParameters(`3)">
            <summary>
            Initializes the parameters (cloning or creating new parameter object with default values).
            </summary>
            <param name="parameters">
            Parameters from a previous layout.
            If it is <see langword="null"/>, the <see cref="P:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.Parameters"/> will be set to the default ones.
            </param>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.Rand">
            <summary>
            Gets or sets the random number generator used to initialize positions randomly (and eventually during algorithm computation).
            </summary>
            <exception cref="T:System.ArgumentNullException">Value is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.InitializeWithRandomPositions(System.Double,System.Double)">
            <summary>
            Initializes the positions of the vertices. Assigns a random position inside the 'bounding box' to the vertices without positions.
            It does NOT modify the position of the other vertices.
            Bounding box:
            x coordinates: <see cref="F:double.Epsilon"/> - <paramref name="width"/>
            y coordinates: <see cref="F:double.Epsilon"/> - <paramref name="height"/>
            </summary>
            <param name="width">Width of the bounding box.</param>
            <param name="height">Height of the bounding box.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.InitializeWithRandomPositions(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the positions of the vertices. Assigns a random position inside the 'bounding box' to the vertices without positions.
            It does NOT modify the position of the other vertices.
            Bounding box:
            x coordinates: <see cref="F:double.Epsilon"/> - <paramref name="width"/>
            y coordinates: <see cref="F:double.Epsilon"/> - <paramref name="height"/>
            </summary>
            <param name="width">Width of the bounding box.</param>
            <param name="height">Height of the bounding box.</param>
            <param name="translateX">Translates the generated x coordinate.</param>
            <param name="translateY">Translates the generated y coordinate.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.NormalizePositions">
            <summary>
            Normalizes the vertices positions.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.CreateLayoutIterationEventArgs(System.Int32,System.Double,System.String,System.Collections.Generic.IDictionary{`0,GraphShape.Point})">
            <summary>
            Creates event arguments for <see cref="E:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.IterationEnded"/>.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <param name="message">Message representing the status of the algorithm.</param>
            <param name="verticesPositions">Vertices positions associations.</param>
            <returns>A new instance of <see cref="T:GraphShape.Algorithms.Layout.ILayoutIterationEventArgs`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`4.OnIterationEnded(System.Int32,System.Double,System.String,System.Boolean)">
            <summary>
            Raises an <see cref="E:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.IterationEnded"/> event.
            </summary>
            <param name="iteration">Number of the current iteration.</param>
            <param name="statusInPercent">Status of the layout algorithm in percent.</param>
            <param name="message">Message representing the status of the algorithm.</param>
            <param name="normalizePositions">Indicates if given positions must be normalized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="iteration"/> is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="statusInPercent"/> is negative.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.DefaultParameterizedLayoutAlgorithmBase`4">
            <summary>
            Base class for all <see cref="T:GraphShape.Algorithms.Layout.ILayoutAlgorithm`5"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <typeparam name="TParameters">Parameters type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.DefaultParameterizedLayoutAlgorithmBase`4.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.DefaultParameterizedLayoutAlgorithmBase`4"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.DefaultParameterizedLayoutAlgorithmBase`4.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},`3)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.DefaultParameterizedLayoutAlgorithmBase`4"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.DefaultParameterizedLayoutAlgorithmBase`4.DefaultParameters">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6">
            <summary>
            Base class for all <see cref="T:GraphShape.Algorithms.Layout.ILayoutAlgorithm`5"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <typeparam name="TVertexInfo">Vertex information type.</typeparam>
            <typeparam name="TEdgeInfo">Edge information type.</typeparam>
            <typeparam name="TParameters">Parameters type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6.#ctor(`2)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},`5)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6.CreateLayoutIterationEventArgs(System.Int32,System.Double,System.String,System.Collections.Generic.IDictionary{`0,GraphShape.Point})">
            <inheritdoc />
            <returns>A new instance of <see cref="T:GraphShape.Algorithms.Layout.ILayoutInfoIterationEventArgs`4"/>.</returns>
        </member>
        <member name="E:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6.InfoIterationEnded">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6.VerticesInfos">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6.EdgesInfos">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6.GetVertexInfo(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6.GetEdgeInfo(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ParameterizedLayoutAlgorithmBase`6.RaiseIterationEnded(GraphShape.Algorithms.Layout.ILayoutIterationEventArgs{`0})">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.CircularLayoutAlgorithm`3">
            <summary>
            Circular layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CircularLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Size},GraphShape.Algorithms.Layout.CircularLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.CircularLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesSizes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CircularLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size},GraphShape.Algorithms.Layout.CircularLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.CircularLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesSizes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.CircularLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.CircularLayoutParameters">
            <summary>
            Circular layout algorithm parameters.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.BoundedFRLayoutParameters">
            <summary>
            Fruchterman-Reingold layout algorithm parameters (FDP), bounded version.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.BoundedFRLayoutParameters.Width">
            <summary>
            Width of the bounding box.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.BoundedFRLayoutParameters.Height">
            <summary>
            Height of the bounding box.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.BoundedFRLayoutParameters.K">
            <summary>
            IdealEdgeLength = sqrt(height * width / vertexCount).
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.BoundedFRLayoutParameters.InitialTemperature">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.BoundedFRLayoutParameters.UpdateParameters">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.BoundedFRLayoutParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.BoundedFRLayoutParameters"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.BoundedFRLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.FRCoolingFunction">
            <summary>
            Enumeration of possible cooling functions for <see cref="T:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3"/> algorithm.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.FRCoolingFunction.Linear">
            <summary>
            Linear.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.FRCoolingFunction.Exponential">
            <summary>
            Exponential.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.FreeFRLayoutParameters">
            <summary>
            Fruchterman-Reingold layout algorithm parameters (FDP).
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FreeFRLayoutParameters.K">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FreeFRLayoutParameters.InitialTemperature">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FreeFRLayoutParameters.IdealEdgeLength">
            <summary>
            Represents the ideal length of the edges.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FreeFRLayoutParameters.UpdateParameters">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FreeFRLayoutParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.FreeFRLayoutParameters"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FreeFRLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3">
            <summary>
            Fruchterman-Reingold layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type</typeparam>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3._temperature">
            <summary>
            Actual temperature of the 'mass'.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3.#ctor(`2,GraphShape.Algorithms.Layout.FRLayoutParametersBase)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},GraphShape.Algorithms.Layout.FRLayoutParametersBase)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3.DefaultParameters">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3.Initialize">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FRLayoutAlgorithm`3.IterateOne">
            <summary>
            Compute one force application iteration.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.FRLayoutParametersBase">
            <summary>
            Base class for Fruchterman-Reingold algorithm parameters (FDP).
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.VertexCount">
            <summary>
            Count of the vertices (used to calculate the constants)
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FRLayoutParametersBase.UpdateParameters">
            <summary>
            Updates computed parameters based on other parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.K">
            <summary>
            Gets the computed ideal edge length.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.InitialTemperature">
            <summary>
            Gets the initial temperature of the mass.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.ConstantOfAttraction">
            <summary>
            Constant <see cref="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.K"/> * <see cref="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.AttractionMultiplier"/>.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.AttractionMultiplier">
            <summary>
            Multiplier of the attraction.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.ConstantOfRepulsion">
            <summary>
            Constant (<see cref="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.K"/> * <see cref="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.RepulsiveMultiplier"/>².
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.RepulsiveMultiplier">
            <summary>
            Multiplier of the repulsion.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.MaxIterations">
            <summary>
            Maximum number of the iterations.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.Lambda">
            <summary>
            Lambda for the cooling.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.FRLayoutParametersBase.CoolingFunction">
            <summary>
            Cooling function.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FRLayoutParametersBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.FRLayoutParametersBase"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.FRLayoutParametersBase.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ISOMLayoutAlgorithm`3">
            <summary>
            Inverted Self-Organizing Map (ISOM) layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ISOMLayoutAlgorithm`3.#ctor(`2,GraphShape.Algorithms.Layout.ISOMLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.ISOMLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ISOMLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},GraphShape.Algorithms.Layout.ISOMLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.ISOMLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ISOMLayoutAlgorithm`3.Initialize">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ISOMLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ISOMLayoutAlgorithm`3.Adjust">
            <summary>
            Adjust all vertices to a random chosen one.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ISOMLayoutAlgorithm`3.GetClosest(GraphShape.Point)">
            <summary>
            Finds the the closest vertex to the given position.
            </summary>
            <param name="tempPos">The position.</param>
            <returns>Returns with the reference of the closest vertex.</returns>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ISOMLayoutParameters">
            <summary>
            Inverted Self-Organizing Map (ISOM) layout algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ISOMLayoutParameters.Width">
            <summary>
            Width of the bounding box.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ISOMLayoutParameters.Height">
            <summary>
            Height of the bounding box.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ISOMLayoutParameters.MaxEpochs">
            <summary>
            Maximum number of iterations.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ISOMLayoutParameters.RadiusConstantTime">
            <summary>
            Radius constant time.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ISOMLayoutParameters.InitialRadius">
            <summary>
            Initial radius.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ISOMLayoutParameters.MinRadius">
            <summary>
            Minimal radius.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ISOMLayoutParameters.InitialAdaptation">
            <summary>
            Initial adaption.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ISOMLayoutParameters.MinAdaptation">
            <summary>
            Minimal adaption.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ISOMLayoutParameters.CoolingFactor">
            <summary>
            Cooling factor.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ISOMLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3">
            <summary>
            Kamada-Kawai layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type</typeparam>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3._positions">
            <summary>
            Positions of the vertices, stored by indices.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3.#ctor(`2,GraphShape.Algorithms.Layout.KKLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},GraphShape.Algorithms.Layout.KKLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3.Initialize">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3.Report(System.Int32)">
            <summary>
            Reports the end of the <paramref name="iteration"/>th iteration.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3.CalculateEnergyIfExchanged(System.Int32,System.Int32)">
            <returns>
            Calculates the energy of the state where 
            the positions of the vertex 'p' and 'q' are exchanged.
            </returns>
            <param name="p">The index of a vertex.</param>
            <param name="q">The index of a vertex.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3.CalculateEnergy">
            <summary>
            Calculates the energy of the spring system.
            </summary>
            <returns>Returns with the energy of the spring system.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3.CalculateDeltaXY(System.Int32)">
            <summary>
            Determines a step to new position of the <paramref name="m"/>th vertex.
            </summary>
            <param name="m">The index of the vertex.</param>
            <returns>The delta XY of the <paramref name="m"/>th vertex.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.KKLayoutAlgorithm`3.CalculateEnergyGradient(System.Int32)">
            <summary>
            Calculates the gradient energy of <paramref name="m"/>th vertex.
            </summary>
            <param name="m">The index of the vertex.</param>
            <returns>The gradient energy of the <paramref name="m"/>th vertex.</returns>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.KKLayoutParameters">
            <summary>
            Kamada-Kawai layout algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.KKLayoutParameters.Width">
            <summary>
            Width of the bounding box.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.KKLayoutParameters.Height">
            <summary>
            Height of the bounding box.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.KKLayoutParameters.MaxIterations">
            <summary>
            Maximum number of the iterations.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.KKLayoutParameters.K">
            <summary>
            Vertex attraction constant (can be the number of vertices in the treated graph).
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.KKLayoutParameters.ExchangeVertices">
            <summary>
            Indicates that vertices can be exchanged to improve algorithm result.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.KKLayoutParameters.LengthFactor">
            <summary>
            Multiplier of the ideal edge length. (With this parameter the user can modify the ideal edge length).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.KKLayoutParameters.DisconnectedMultiplier">
            <summary>
            Ideal distance between the disconnected points (1 is equal the ideal edge length).
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.KKLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3">
            <summary>
            LinLog layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3.#ctor(`2,GraphShape.Algorithms.Layout.LinLogLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},GraphShape.Algorithms.Layout.LinLogLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3.Initialize">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3.CopyPositions">
            <summary>
            Copies positions from <see cref="F:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3._vertices"/> to <see cref="P:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.VerticesPositions"/>.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3.Report(System.Int32)">
            <summary>
            Reports the end of iteration <paramref name="step"/>.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3.AddRepulsionDirection(System.Int32,GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm{`0,`1,`2}.QuadTree,GraphShape.Vector@)">
            <summary>
            Computes the repulsion force for vertex at given <paramref name="index"/> wit <paramref name="quadTree"/>.
            </summary>
            <param name="index">Index of the vertex for which adding repulsion force.</param>
            <param name="quadTree">Quad tree.</param>
            <param name="direction">Vector on which adding the computed repulsive force.</param>
            <returns>The second derivative of the repulsive energy.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3.BuildQuadTree">
            <summary>
            Build a <see cref="T:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3.QuadTree"/> (similar to OctTree but in 2D).
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LinLogLayoutAlgorithm`3.QuadTree.MoveNode(GraphShape.Point,GraphShape.Point,System.Double)">
            <summary>
            Moves a node (re-compute section position by subtracting moved node position).
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LinLogLayoutParameters">
            <summary>
            LinLog layout algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LinLogLayoutParameters.AttractionExponent">
            <summary>
            Attraction exponent.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LinLogLayoutParameters.RepulsiveExponent">
            <summary>
            Repulsive exponent.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LinLogLayoutParameters.GravitationMultiplier">
            <summary>
            Gravitation multiplier.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.LinLogLayoutParameters.MaxIterations">
            <summary>
            Maximum number of the iterations.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.LinLogLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3">
            <summary>
            Sugiyama layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.BuildSparseNormalizedGraph">
            <summary>
            From the original graph it creates a sparse normalized graph
            with segments and dummy vertices (p-vertex, q-vertex, s-vertex).
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.CreateDummyVerticesAndSegments">
            <summary>
            Replaces long edge (span(edge) > 1) with dummy vertices
            or segments (span(edge) > 2).
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.AddSegment(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.SugiVertex,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.SugiVertex)">
            <summary>
            Adds a new segment to the sparse compaction graph.
            </summary>
            <param name="pVertex">The source vertex of the segment.</param>
            <param name="qVertex">The target vertex of the segment.</param>
            <returns>The newly created segment.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.AddDummyVertex(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.VertexTypes,System.Int32)">
            <summary>
            Adds a dummy vertex to the sparse compaction graph.
            </summary>
            <param name="type">The type of the dummy vertex (p,q,r).</param>
            <param name="layerIndex">The index of the layer of the vertex.</param>
            <returns>The new vertex which has been added to the graph and the layers.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.DoCrossingMinimizations">
            <summary>
            Minimizes the crossings between the layers by sweeping up and down
            while there could be something optimized.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Sweeping(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean@,System.Int32@)">
            <summary>
            Sweeps between the <paramref name="startLayerIndex"/> and <paramref name="endLayerIndex"/>
            in the way represented by the step.
            </summary>
            <param name="startLayerIndex">The index of the start layer (where the sweeping starts from).</param>
            <param name="endLayerIndex">The index of the last layer (where the sweeping ends).</param>
            <param name="step">Increment or decrement of the layer index. (1 or -1)</param>
            <param name="enableSameMeasureOptimization">Indicates if the same measure optimization is enabled.</param>
            <param name="changed">Indicates if layer has changed or not.</param>
            <param name="phase">Algorithm phase.</param>
            <returns>The number of the edge crossings.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.AppendSegmentsToAlternatingLayer(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.AlternatingLayer,System.Boolean)">
            <summary>
            Replaces the P or Q vertices of the <paramref name="alternatingLayer"/> with their segment on the next layer.
            </summary>
            <param name="alternatingLayer">The actual alternating layer. It will be modified.</param>
            <param name="straightSweep">If true, we are sweeping down else we're sweeping up.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.AssignPositionsOnActualLayer(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.AlternatingLayer)">
            <summary>
            Assigns the positions of the vertices and segment container on the actual layer.
            </summary>
            <param name="alternatingLayer">The actual layer (L_i).</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.RemoveCycles">
            <summary>
            Removes the cycles from the original graph with simply reverting some edges.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.RemoveLoops">
            <summary>
            Removes the edges which source and target is the same vertex.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.AlternatingLayer">
            <summary>
            List of alternating <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer"/> and <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex"/>.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.AlternatingLayer.EnsureAlternatingAndPositions">
            <summary>
            This method ensures that the layer is a real alternating
            layer: starts with a <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer"/> followed by a Vertex,
            another <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer"/>, another Vertex, ... ending with 
            a <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer"/>.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.AlternatingLayer.EnsurePositions">
            <summary>
            Ensures items positions.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.AlternatingLayer.SetPositions">
            <summary>
            Sets positions to list items.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.AlternatingLayer.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.AlternatingLayer.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3._graph">
            <summary>
            The copy of the <see cref="P:GraphShape.Algorithms.Layout.LayoutAlgorithmBase`3.VisitedGraph"/> which should be laid out.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3._isolatedVertices">
            <summary>
            Isolated vertices in the visited graph, which will be handled only in
            the last step of the layout.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3._layers">
            <summary>
            It stores the vertices or segments which inside the layers.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.#ctor(`2,GraphShape.Algorithms.Layout.SugiyamaLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Size},GraphShape.Algorithms.Layout.SugiyamaLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size},GraphShape.Algorithms.Layout.SugiyamaLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.CopyToWorkingGraph">
            <summary>
            Initializes the <see cref="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3._graph"/> field which stores the graph that we operate on.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.EdgeRoutes">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge">
            <summary>
            Sugiyama internal graph edge.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge._tempMark">
            <summary>
            <see cref="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge.Marked"/> backup value.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge.#ctor(`1,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.SugiVertex,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.SugiVertex)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge"/> class.
            </summary>
            <param name="originalEdge">Original edge (tag).</param>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge.OriginalEdge">
            <summary>
            Gets the original edge of this <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge"/>.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge.Marked">
            <summary>
            Gets or sets that the edge is included in a 
            type 1 conflict as a non-inner segment (true) or not (false).
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge.SaveMarkedToTemp">
            <summary>
            Backup <see cref="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge.Marked"/> into <see cref="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge._tempMark"/>.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge.LoadMarkedFromTemp">
            <summary>
            Restore <see cref="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge.Marked"/> from <see cref="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiEdge._tempMark"/>.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.VertexTypes">
            <summary>
            Enumeration of possible vertex types.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.VertexTypes.Original">
            <summary>
            Original vertex.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.VertexTypes.PVertex">
            <summary>
            P vertex.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.VertexTypes.QVertex">
            <summary>
            Q vertex.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.VertexTypes.RVertex">
            <summary>
            R vertex.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.EdgeTypes">
            <summary>
            Enumeration of possible edge types.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.EdgeTypes.NonInnerSegment">
            <summary>
            Non inner segment.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.EdgeTypes.InnerSegment">
            <summary>
            Inner segment.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.IData">
            <summary>
            Represents an indexed data.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.IData.Position">
            <summary>
            Data position.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Data">
            <summary>
            Base class for any <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.IData"/>.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Data.Position">
            <inheritdoc />
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Data.Sinks">
            <summary>
            Sinks.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Data.Shifts">
            <summary>
            Shifts
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex">
            <summary>
            Sugiyama internal graph vertex.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.OriginalVertex">
            <summary>
            Vertex from the original graph to layout.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.Type">
            <summary>
            Vertex type.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.Size">
            <summary>
            Vertex size.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.Segment">
            <summary>
            Attached segment.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.LayerIndex">
            <summary>
            Layer index.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.IndexInsideLayer">
            <summary>
            The index inside the layer.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.MeasuredPosition">
            <summary>
            Measured position.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.LayerPosition">
            <summary>
            Vertex layer position.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.SlicePosition">
            <summary>
            Vertex slice position.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.Roots">
            <summary>
            Root vertices.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.Aligns">
            <summary>
            Align vertices..
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.BlockWidths">
            <summary>
            Block widths.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.SlicePositions">
            <summary>
            Slice positions.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.PermutationIndex">
            <summary>
            Permutation index.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.DoNotOptimize">
            <summary>
            Indicates if the vertex must be optimized or not.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.#ctor(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.VertexTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex"/> class.
            </summary>
            <param name="type">Vertex type.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.#ctor(`0,GraphShape.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex"/> class.
            </summary>
            <param name="originalVertex">Wrapped vertex.</param>
            <param name="size">Vertex size.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.#ctor(`0,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.VertexTypes,GraphShape.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex"/> class.
            </summary>
            <param name="originalVertex">Wrapped vertex.</param>
            <param name="type">Vertex type.</param>
            <param name="size">Vertex size.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.SavePositionToTemp">
            <summary>
            Backup <see cref="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Data.Position"/> into <see cref="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex._tempPosition"/>.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex.LoadPositionFromTemp">
            <summary>
            Restore <see cref="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Data.Position"/> from <see cref="F:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex._tempPosition"/>.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Segment">
            <summary>
            Segment linking two <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SugiVertex"/>.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Segment.PVertex">
            <summary>
            Gets or sets the p-vertex of the segment.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Segment.QVertex">
            <summary>
            Gets or sets the q-vertex of the segment.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Segment.#ctor(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.SugiVertex,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.SugiVertex)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Segment"/> class.
            </summary>
            <param name="pVertex">P vertex.</param>
            <param name="qVertex">Q vertex.</param>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.ISegmentContainer">
            <summary>
            Represents a <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Segment"/> container.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.ISegmentContainer.Append(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.Segment)">
            <summary>
            Appends the segment <paramref name="segment"/> to the end of this container.
            </summary>
            <param name="segment">The segment to append.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.ISegmentContainer.Join(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer)">
            <summary>
            Appends all elements of the <paramref name="container"/> to this container.
            </summary>
            <param name="container">Container to append.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.ISegmentContainer.Split(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.Segment,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer@,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer@)">
            <summary>
            Splits this container at segment <paramref name="segment"/> into two containers
            <paramref name="container1"/> and <paramref name="container2"/>. 
            All elements less than <paramref name="segment"/> are stored in container <paramref name="container1"/> and
            those who are greater than <paramref name="segment"/> in <paramref name="container2"/>.
            Element <paramref name="segment"/> is neither in <paramref name="container1"/> or 
            <paramref name="container2"/>.
            </summary>
            <param name="segment">The segment to split at.</param>
            <param name="container1">The container which contains the elements before <paramref name="segment"/>.</param>
            <param name="container2">The container which contains the elements after <paramref name="segment"/>.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.ISegmentContainer.Split(System.Int32,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer@,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer@)">
            <summary>
            Splits this container at position <paramref name="k"/>. The first <paramref name="k"/>
            elements of the container are stored in <paramref name="container1"/> and the remainder
            in <paramref name="container2"/>.
            </summary>
            <param name="k">The index where the container should be split.</param>
            <param name="container1">The container which contains the elements before <paramref name="k"/>.</param>
            <param name="container2">The container which contains the elements after <paramref name="k"/>.</param>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.ISegmentContainer.Count">
            <summary>
            Element count.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer">
            <summary>
            <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.Segment"/> container.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer"/> class.
            </summary>
            <param name="capacity">Container capacity.</param>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer.Append(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.Segment)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer.Join(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer.Split(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.Segment,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer@,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer@)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer.Split(System.Int32,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer@,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer@)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer.Split(System.Int32,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer@,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.ISegmentContainer@,System.Boolean)">
            <summary>
            Splits this container at position <paramref name="k"/>. The first <paramref name="k"/>
            elements of the container are stored in <paramref name="container1"/> and the remainder
            in <paramref name="container2"/>.
            </summary>
            <param name="k">The index where the container should be split.</param>
            <param name="container1">The container which contains the elements before <paramref name="k"/>.</param>
            <param name="container2">The container which contains the elements after <paramref name="k"/>.</param>
            <param name="keep">Indicates if <paramref name="k"/>th item should be kept in <paramref name="container1"/> or not.</param>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer.Position">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.SegmentContainer.Clone">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm`3.CalculateSlicePositions(GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.LeftRightMode,GraphShape.Algorithms.Layout.SugiyamaLayoutAlgorithm{`0,`1,`2}.UpperLowerEdges)">
            <summary>
            Calculates the slice positions based on the selected modes.
            </summary>
            <param name="leftRightMode">Mode of the vertical alignment.</param>
            <param name="upperLowerEdges">Alignment based on which edges (upper or lower ones).</param>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaEdgeRouting">
            <summary>
            Enumeration of possible edge routing for Sugiyama layout algorithm.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaEdgeRouting.Traditional">
            <summary>
            Traditional routing.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SugiyamaEdgeRouting.Orthogonal">
            <summary>
            Orthogonal routing.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SugiyamaLayoutParameters">
            <summary>
            Sugiyama layout algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutParameters.Direction">
            <summary>
            Layout direction (orientation)
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutParameters.LayerGap">
            <summary>
            Distance between layers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutParameters.SliceGap">
            <summary>
            Distance between slices.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutParameters.PositionMode">
            <summary>
            Position mode (can be negative or in [0, 3]).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is higher or equal to 3.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutParameters.OptimizeWidth">
            <summary>
            Indicates if a width optimization should be performed.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutParameters.WidthPerHeight">
            <summary>
            Width per height ratio.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutParameters.MinimizeEdgeLength">
            <summary>
            Indicates if edge length should be minimized or not.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SugiyamaLayoutParameters.EdgeRouting">
            <summary>
            Edge routing method.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SugiyamaLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.RandomLayoutAlgorithm`3">
            <summary>
            Random layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.RandomLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Size},System.Collections.Generic.IDictionary{`0,GraphShape.Algorithms.Layout.RandomVertexType},GraphShape.Algorithms.Layout.RandomLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.RandomLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="verticesTypes">Vertices types.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesSizes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.RandomLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size},System.Collections.Generic.IDictionary{`0,GraphShape.Algorithms.Layout.RandomVertexType},GraphShape.Algorithms.Layout.RandomLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.RandomLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="verticesTypes">Vertices types.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesSizes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.RandomLayoutAlgorithm`3.Initialize">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.RandomLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.RandomLayoutParameters">
            <summary>
            Random layout algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.RandomLayoutParameters.XOffset">
            <summary>
            X offset for the bounding box.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.RandomLayoutParameters.YOffset">
            <summary>
            Y offset for the bounding box.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.RandomLayoutParameters.Width">
            <summary>
            Width of the bounding box.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.RandomLayoutParameters.Height">
            <summary>
            Height of the bounding box.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.RandomLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.RandomVertexType">
            <summary>
            Enumeration of vertex types for <see cref="T:GraphShape.Algorithms.Layout.RandomLayoutAlgorithm`3"/>.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.RandomVertexType.Free">
            <summary>
            Free position.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.RandomVertexType.Fixed">
            <summary>
            Fixed position.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.BalloonTreeLayoutAlgorithm`3">
            <summary>
            Balloon tree layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.BalloonTreeLayoutAlgorithm`3.#ctor(`2,`0,GraphShape.Algorithms.Layout.BalloonTreeLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.BalloonTreeLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="selectedVertex">Root vertex.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selectedVertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="selectedVertex"/> is not part of <paramref name="visitedGraph"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.BalloonTreeLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},`0,GraphShape.Algorithms.Layout.BalloonTreeLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.BalloonTreeLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="selectedVertex">Root vertex.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="selectedVertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="selectedVertex"/> is not part of <paramref name="visitedGraph"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.BalloonTreeLayoutAlgorithm`3.Initialize">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.BalloonTreeLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.BalloonTreeLayoutParameters">
            <summary>
            Balloon Tree layout algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.BalloonTreeLayoutParameters.MinRadius">
            <summary>
            Minimum radius.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.BalloonTreeLayoutParameters.Border">
            <summary>
            Border.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.BalloonTreeLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SimpleTreeLayoutAlgorithm`3">
            <summary>
            Simple tree layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SimpleTreeLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Size},GraphShape.Algorithms.Layout.SimpleTreeLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SimpleTreeLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesSizes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SimpleTreeLayoutAlgorithm`3.#ctor(`2,System.Collections.Generic.IDictionary{`0,GraphShape.Point},System.Collections.Generic.IDictionary{`0,GraphShape.Size},GraphShape.Algorithms.Layout.SimpleTreeLayoutParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.Layout.SimpleTreeLayoutAlgorithm`3"/> class.
            </summary>
            <param name="visitedGraph">Graph to layout.</param>
            <param name="verticesPositions">Vertices positions.</param>
            <param name="verticesSizes">Vertices sizes.</param>
            <param name="parameters">Optional algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="visitedGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="verticesSizes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SimpleTreeLayoutAlgorithm`3.InternalCompute">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SimpleTreeLayoutParameters">
            <summary>
            Simple Tree layout algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SimpleTreeLayoutParameters.Direction">
            <summary>
            Direction of the layout.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SimpleTreeLayoutParameters.VertexGap">
            <summary>
            Minimum gap between vertices.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SimpleTreeLayoutParameters.LayerGap">
            <summary>
            Minimum gap between layers.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.SimpleTreeLayoutParameters.SpanningTreeGeneration">
            <summary>
            Spanning tree generation mode.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.SimpleTreeLayoutParameters.GetEqualityElements">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.SpanningTreeGeneration">
            <summary>
            Enumeration of possible spanning tree generation mode.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SpanningTreeGeneration.BFS">
            <summary>
            BFS (Breadth-First Search).
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.Layout.SpanningTreeGeneration.DFS">
            <summary>
            DFS (Depth-First Search).
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.StandardLayoutAlgorithmFactory`3">
            <summary>
            Simple implementation of a layout algorithm factory.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.StandardLayoutAlgorithmFactory`3.AlgorithmTypes">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.StandardLayoutAlgorithmFactory`3.CreateAlgorithm(System.String,GraphShape.Algorithms.Layout.ILayoutContext{`0,`1,`2},GraphShape.Algorithms.Layout.ILayoutParameters)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.StandardLayoutAlgorithmFactory`3.CreateParameters(System.String,GraphShape.Algorithms.Layout.ILayoutParameters)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.StandardLayoutAlgorithmFactory`3.IsValidAlgorithm(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.StandardLayoutAlgorithmFactory`3.GetAlgorithmType(GraphShape.Algorithms.Layout.ILayoutAlgorithm{`0,`1,`2})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.StandardLayoutAlgorithmFactory`3.NeedEdgeRouting(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.Layout.StandardLayoutAlgorithmFactory`3.NeedOverlapRemoval(System.String)">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ILayoutAlgorithm`3">
            <summary>
            Represents a layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutAlgorithm`3.VerticesPositions">
            <summary>
            Vertices positions associations.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ILayoutAlgorithm`3.GetVertexInfo(`0)">
            <summary>
            Returns the extra layout information of the <paramref name="vertex"/> (or <see langword="null"/>).
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ILayoutAlgorithm`3.GetEdgeInfo(`1)">
            <summary>
            Returns the extra layout information of the <paramref name="edge"/> (or <see langword="null"/>).
            </summary>
        </member>
        <member name="E:GraphShape.Algorithms.Layout.ILayoutAlgorithm`3.ProgressChanged">
            <summary>
            Fired when layout algorithm progress changed.
            </summary>
        </member>
        <member name="E:GraphShape.Algorithms.Layout.ILayoutAlgorithm`3.IterationEnded">
            <summary>
            Fired when a layout iteration has been done.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ILayoutAlgorithm`5">
            <summary>
            Represents a layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <typeparam name="TVertexInfo">Vertex information type.</typeparam>
            <typeparam name="TEdgeInfo">Edge information type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutAlgorithm`5.VerticesInfos">
            <summary>
            Extra vertices information, calculated by the layout.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutAlgorithm`5.EdgesInfos">
            <summary>
            Extra edges information, calculated by the layout.
            </summary>
        </member>
        <member name="E:GraphShape.Algorithms.Layout.ILayoutAlgorithm`5.InfoIterationEnded">
            <summary>
            Fired when a layout iteration has been done (with more detailed information).
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ILayoutAlgorithmFactory`3">
            <summary>
            Represents a factory of layout algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutAlgorithmFactory`3.AlgorithmTypes">
            <summary>
            The set of available algorithms.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ILayoutAlgorithmFactory`3.CreateAlgorithm(System.String,GraphShape.Algorithms.Layout.ILayoutContext{`0,`1,`2},GraphShape.Algorithms.Layout.ILayoutParameters)">
            <summary>
            Creates an algorithm corresponding to given <paramref name="algorithmType"/>,
            <paramref name="context"/> and <paramref name="parameters"/>.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <param name="context">Creation context.</param>
            <param name="parameters">Algorithm parameters.</param>
            <returns>Created algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithmType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ILayoutAlgorithmFactory`3.CreateParameters(System.String,GraphShape.Algorithms.Layout.ILayoutParameters)">
            <summary>
            Creates algorithm parameters for an algorithm of given <paramref name="algorithmType"/>
            and <paramref name="parameters"/>.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <param name="parameters">Algorithm parameters.</param>
            <returns>Parameters for the algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithmType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ILayoutAlgorithmFactory`3.IsValidAlgorithm(System.String)">
            <summary>
            Checks if the given <paramref name="algorithmType"/> is a valid one.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <returns>True if the algorithm type is valid, false otherwise.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ILayoutAlgorithmFactory`3.GetAlgorithmType(GraphShape.Algorithms.Layout.ILayoutAlgorithm{`0,`1,`2})">
            <summary>
            Gets the algorithm type from a given <paramref name="algorithm"/>.
            </summary>
            <param name="algorithm">Algorithm to get its type.</param>
            <returns>Algorithm type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithm"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ILayoutAlgorithmFactory`3.NeedEdgeRouting(System.String)">
            <summary>
            Indicates if the given <paramref name="algorithmType"/> require edge routing.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <returns>True if the algorithm require edge routing, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithmType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ILayoutAlgorithmFactory`3.NeedOverlapRemoval(System.String)">
            <summary>
            Indicates if the given <paramref name="algorithmType"/> require overlap removal.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <returns>True if the algorithm require overlap removal, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithmType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ILayoutContext`3">
            <summary>
            Represents a graph layout context.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutContext`3.Positions">
            <summary>
            Vertices positions.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutContext`3.Sizes">
            <summary>
            Vertices sizes.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutContext`3.Graph">
            <summary>
            Graph concerned by the layout.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutContext`3.Mode">
            <summary>
            Layout mode.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ILayoutInfoIterationEventArgs`2">
            <summary>
            Represents information on a layout algorithm iteration.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ILayoutInfoIterationEventArgs`2.GetVertexInfo(`0)">
            <summary>
            Returns the extra layout information of the <paramref name="vertex"/> (or <see langword="null"/>).
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.ILayoutInfoIterationEventArgs`2.GetEdgeInfo(`1)">
            <summary>
            Returns the extra layout information of the <paramref name="edge"/> (or <see langword="null"/>).
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ILayoutInfoIterationEventArgs`4">
            <summary>
            Represents information on a layout algorithm iteration.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TVertexInfo">Vertex information type.</typeparam>
            <typeparam name="TEdgeInfo">Edge information type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutInfoIterationEventArgs`4.VerticesInfos">
            <summary>
            Extra vertices information.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutInfoIterationEventArgs`4.EdgesInfos">
            <summary>
            Extra edges information.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ILayoutIterationEventArgs`1">
            <summary>
            Represents a layout iteration event arguments.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutIterationEventArgs`1.StatusInPercent">
            <summary>
            Represents the status of the layout algorithm in percent.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutIterationEventArgs`1.Abort">
            <summary>
            If the user sets this value to true, the algorithm aborts as soon as possible.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutIterationEventArgs`1.Iteration">
            <summary>
            Number of the current iteration.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutIterationEventArgs`1.Message">
            <summary>
            Message representing the status of the algorithm.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.ILayoutIterationEventArgs`1.VerticesPositions">
            <summary>
            Vertices positions associations.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ILayoutParameters">
            <summary>
            Represents layout algorithm parameters.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.IParameterizedLayoutAlgorithm`3">
            <summary>
            Represents a parametrized layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.Layout.IParameterizedLayoutAlgorithm`3.GetParameters">
            <summary>
            Gets layout parameters.
            </summary>
            <returns>Layout parameters.</returns>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.IParameterizedLayoutAlgorithm`4">
            <summary>
            Represents a parametrized layout algorithm.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <typeparam name="TParameters">Parameters type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.Layout.IParameterizedLayoutAlgorithm`4.Parameters">
            <summary>
            Layout parameters.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.ProgressChangedEventHandler">
            <summary>
            Handler to report the progress of a layout algorithm.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="percent">The status of the progress in percent.</param>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutIterationEndedEventHandler`1">
            <summary>
            Handler for a layout iteration ended.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <param name="sender">Event sender.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:GraphShape.Algorithms.Layout.LayoutIterationEndedEventHandler`4">
            <summary>
            Handler for a layout iteration ended.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TVertexInfo">Vertex information type.</typeparam>
            <typeparam name="TEdgeInfo">Edge information type.</typeparam>
            <param name="sender">Event sender.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2">
            <summary>
            Force-Scan Algorithm (FSA).
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <typeparam name="TParameters">Algorithm parameters type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.#ctor(System.Collections.Generic.IDictionary{`0,GraphShape.Rect},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2"/> class.
            </summary>
            <param name="rectangles">Overlap rectangles.</param>
            <param name="parameters">Algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rectangles"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.RemoveOverlap">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.Force(GraphShape.Rect,GraphShape.Rect)">
            <summary>
            Specifies the bounding force of the two rectangles.
            </summary>
            <param name="vi">First rectangle.</param>
            <param name="vj">Second rectangle.</param>
            <returns>Force vector.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.Force2(GraphShape.Rect,GraphShape.Rect)">
            <summary>
            Specifies the bounding force of the two rectangles (version 2).
            </summary>
            <param name="vi">First rectangle.</param>
            <param name="vj">Second rectangle.</param>
            <returns>Force vector.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.XComparison(GraphShape.Algorithms.OverlapRemoval.RectangleWrapper{`0},GraphShape.Algorithms.OverlapRemoval.RectangleWrapper{`0})">
            <summary>
            Compares both rectangle center on X axis.
            </summary>
            <param name="r1">First rectangle.</param>
            <param name="r2">Second rectangle.</param>
            <returns>
            0 if both rectangle have same X center,
            -1 if <paramref name="r1"/> X center is lower than <paramref name="r2"/>,
            1 otherwise.
            </returns>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.Horizontal">
            <summary>
            Horizontal offset rectangles.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.HorizontalImproved">
            <summary>
            Horizontal improvement.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.YComparison(GraphShape.Algorithms.OverlapRemoval.RectangleWrapper{`0},GraphShape.Algorithms.OverlapRemoval.RectangleWrapper{`0})">
            <summary>
            Compares both rectangle center on Y axis.
            </summary>
            <param name="r1">First rectangle.</param>
            <param name="r2">Second rectangle.</param>
            <returns>
            0 if both rectangle have same Y center,
            -1 if <paramref name="r1"/> Y center is lower than <paramref name="r2"/>,
            1 otherwise.
            </returns>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.Vertical">
            <summary>
            Vertical offset rectangles.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.VerticalImproved">
            <summary>
            Vertical improvement.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`1">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`1.#ctor(System.Collections.Generic.IDictionary{`0,GraphShape.Rect},GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`1"/> class.
            </summary>
            <param name="rectangles">Overlap rectangles.</param>
            <param name="parameters">Algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rectangles"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.OneWayFSAAlgorithm`1">
            <summary>
            One way Force-Scan Algorithm (FSA).
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OneWayFSAAlgorithm`1.#ctor(System.Collections.Generic.IDictionary{`0,GraphShape.Rect},GraphShape.Algorithms.OverlapRemoval.OneWayFSAParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.OverlapRemoval.OneWayFSAAlgorithm`1"/> class.
            </summary>
            <param name="rectangles">Overlap rectangles.</param>
            <param name="parameters">Algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rectangles"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OneWayFSAAlgorithm`1.RemoveOverlap">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OneWayFSAAlgorithm`1.HorizontalImproved">
            <inheritdoc cref="M:GraphShape.Algorithms.OverlapRemoval.FSAAlgorithm`2.HorizontalImproved"/>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.OneWayFSAParameters">
            <summary>
            One way FSA algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.OneWayFSAParameters.Way">
            <summary>
            Overlap removal orientation (way).
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.OneWayFSAWay">
            <summary>
            Enumeration of possible FSA algorithm orientations (way).
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.OverlapRemoval.OneWayFSAWay.Horizontal">
            <summary>
            Horizontal.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.OverlapRemoval.OneWayFSAWay.Vertical">
            <summary>
            Vertical.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2">
            <summary>
            Base class for all overlap removal algorithm.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <typeparam name="TParameters">Algorithm parameters type.</typeparam>
        </member>
        <member name="F:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2.WrappedRectangles">
            <summary>
            Wrapped rectangles.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2.#ctor(System.Collections.Generic.IDictionary{`0,GraphShape.Rect},`1)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2"/> class.
            </summary>
            <param name="rectangles">Overlap rectangles.</param>
            <param name="parameters">Algorithm parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rectangles"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2.Rectangles">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2.Parameters">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2.GetParameters">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2.InternalCompute">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2.AddGaps">
            <summary>
            Adds gaps between rectangles.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2.RemoveOverlap">
            <summary>
            Removes overlap.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalAlgorithmBase`2.RemoveGaps">
            <summary>
            Removes gaps between rectangles.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalContext`1">
            <summary>
            Base class for all overlap removal context.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalContext`1.Rectangles">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalContext`1.#ctor(System.Collections.Generic.IDictionary{`0,GraphShape.Rect})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalContext`1"/> class.
            </summary>
            <param name="rectangles">Overlap rectangles.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rectangles"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalHelpers">
            <summary>
            Overlap removal helpers.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalHelpers.GetCenter(GraphShape.Rect)">
            <summary>
            Gets the center of this <paramref name="rectangle"/>.
            </summary>
            <param name="rectangle">Rectangle from which getting center.</param>
            <returns>Rectangle center.</returns>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalParameters">
            <summary>
            Overlap removal algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalParameters.VerticalGap">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalParameters.HorizontalGap">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.OverlapRemovalParameters.Clone">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.RectangleWrapper`1">
            <summary>
            <see cref="T:GraphShape.Rect"/>angle wrapper.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.RectangleWrapper`1.Id">
            <summary>
            Rectangle Id.
            </summary>
        </member>
        <member name="F:GraphShape.Algorithms.OverlapRemoval.RectangleWrapper`1.Rectangle">
            <summary>
            Wrapped rectangle.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.RectangleWrapper`1.#ctor(`0,GraphShape.Rect)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.Algorithms.OverlapRemoval.RectangleWrapper`1"/> class.
            </summary>
            <param name="rectangle">Rectangle to wrap.</param>
            <param name="id">
            Rectangle id (at the end of the overlap removal, we must know which rectangle
            is associated to which object. The id will be resolved at that time.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="id"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.RectangleWrapper`1.Center">
            <summary>
            Rectangle center.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.RectangleWrapper`1.CenterX">
            <summary>
            Rectangle center on X axis.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.RectangleWrapper`1.CenterY">
            <summary>
            Rectangle center on Y axis.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.StandardOverlapRemovalAlgorithmFactory`1">
            <summary>
            Simple implementation of an overlap removal algorithm factory.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.StandardOverlapRemovalAlgorithmFactory`1.AlgorithmTypes">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.StandardOverlapRemovalAlgorithmFactory`1.CreateAlgorithm(System.String,GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalContext{`0},GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalParameters)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">Trying to create One Way FSA with other parameters than <see cref="T:GraphShape.Algorithms.OverlapRemoval.OneWayFSAParameters"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.StandardOverlapRemovalAlgorithmFactory`1.CreateParameters(System.String,GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalParameters)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.StandardOverlapRemovalAlgorithmFactory`1.IsValidAlgorithm(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.StandardOverlapRemovalAlgorithmFactory`1.GetAlgorithmType(GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithm{`0})">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithm`1">
            <summary>
            Represents an overlap removal algorithm.
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithm`1.Rectangles">
            <summary>
            Overlap rectangles.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithm`1.GetParameters">
            <summary>
            Gets overlap removal parameters.
            </summary>
            <returns>Overlap removal parameters.</returns>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithm`2">
            <summary>
            Represents an overlap removal algorithm (with parameters).
            </summary>
            <typeparam name="TObject">Object type.</typeparam>
            <typeparam name="TParameters">Algorithm parameters type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithm`2.Parameters">
            <summary>
            Overlap removal parameters.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithmFactory`1">
            <summary>
            Represents a factory of overlap removal algorithms.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithmFactory`1.AlgorithmTypes">
            <summary>
            The set of available algorithms.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithmFactory`1.CreateAlgorithm(System.String,GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalContext{`0},GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalParameters)">
            <summary>
            Creates an algorithm corresponding to given <paramref name="algorithmType"/>,
            <paramref name="context"/> and <paramref name="parameters"/>.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <param name="context">Creation context.</param>
            <param name="parameters">Algorithm parameters.</param>
            <returns>Created algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithmType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithmFactory`1.CreateParameters(System.String,GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalParameters)">
            <summary>
            Creates algorithm parameters for an algorithm of given <paramref name="algorithmType"/>
            and <paramref name="parameters"/>.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <param name="parameters">Algorithm parameters.</param>
            <returns>Parameters for the algorithm.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithmType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithmFactory`1.IsValidAlgorithm(System.String)">
            <summary>
            Checks if the given <paramref name="algorithmType"/> is a valid one.
            </summary>
            <param name="algorithmType">Algorithm type.</param>
            <returns>True if the algorithm type is valid, false otherwise.</returns>
        </member>
        <member name="M:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithmFactory`1.GetAlgorithmType(GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalAlgorithm{`0})">
            <summary>
            Gets the algorithm type from a given <paramref name="algorithm"/>.
            </summary>
            <param name="algorithm">Algorithm to get its type.</param>
            <returns>Algorithm type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="algorithm"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalContext`1">
            <summary>
            Represents an overlap removal context.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalContext`1.Rectangles">
            <summary>
            Overlap rectangles.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalParameters">
            <summary>
            Represents overlap removal algorithm parameters.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalParameters.VerticalGap">
            <summary>
            Vertical gap.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.OverlapRemoval.IOverlapRemovalParameters.HorizontalGap">
            <summary>
            Horizontal gap.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.IAlgorithm">
            <summary>
            Represents an algorithm which is not connected to any graph.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.IAlgorithm.SyncRoot">
            <summary>
            Synchronizer object.
            </summary>
        </member>
        <member name="P:GraphShape.Algorithms.IAlgorithm.State">
            <summary>
            Current computation state.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.IAlgorithm.Compute">
            <summary>
            Runs the computation.
            </summary>
        </member>
        <member name="M:GraphShape.Algorithms.IAlgorithm.Abort">
            <summary>
            Abort the computation.
            </summary>
        </member>
        <member name="E:GraphShape.Algorithms.IAlgorithm.StateChanged">
            <summary>
            Fired when the computation state changed.
            </summary>
        </member>
        <member name="E:GraphShape.Algorithms.IAlgorithm.Started">
            <summary>
            Fired when the computation start.
            </summary>
        </member>
        <member name="E:GraphShape.Algorithms.IAlgorithm.Finished">
            <summary>
            Fired when the computation is finished.
            </summary>
        </member>
        <member name="E:GraphShape.Algorithms.IAlgorithm.Aborted">
            <summary>
            Fired when the computation is aborted.
            </summary>
        </member>
        <member name="T:GraphShape.Algorithms.IAlgorithmParameters">
            <summary>
            Represents algorithm parameters.
            </summary>
        </member>
        <member name="T:GraphShape.CollectionExtensions">
            <summary>
            Helpers to deal with some collection operations.
            </summary>
        </member>
        <member name="M:GraphShape.CollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all <paramref name="elements"/> from <paramref name="collection"/>.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="collection">Collection to remove item from.</param>
            <param name="elements">Elements to remove.</param>
        </member>
        <member name="T:GraphShape.EdgeTypes">
            <summary>
            Enumeration of possible edge types.
            </summary>
        </member>
        <member name="F:GraphShape.EdgeTypes.General">
            <summary>
            General edge.
            </summary>
        </member>
        <member name="F:GraphShape.EdgeTypes.Hierarchical">
            <summary>
            Hierarchical edge.
            </summary>
        </member>
        <member name="T:GraphShape.ITypedEdge`1">
            <summary>
            Represents an edge that has a type.
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="P:GraphShape.ITypedEdge`1.Type">
            <summary>
            Edge type.
            </summary>
        </member>
        <member name="T:GraphShape.ICompoundGraph`2">
            <summary>
            Represents a graph with parent/children relationships between vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:GraphShape.ICompoundGraph`2.SimpleVertices">
            <summary>
            Gets the set of simple vertices.
            </summary>
        </member>
        <member name="P:GraphShape.ICompoundGraph`2.CompoundVertices">
            <summary>
            Gets the set of compound vertices.
            </summary>
        </member>
        <member name="M:GraphShape.ICompoundGraph`2.AddChildVertex(`0,`0)">
            <summary>
            Adds the <paramref name="child"/> vertex to the graph if not already inside and sets
            it as child vertex of <paramref name="parent"/> vertex.
            </summary>
            <param name="parent">Parent vertex.</param>
            <param name="child">Vertex to add as child.</param>
            <returns>True if vertex is added as child with success, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="child"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="child"/> already has a parent vertex.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="parent"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ICompoundGraph`2.AddChildVertexRange(`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the set of <paramref name="children"/> vertices to the graph if not already inside and sets
            them as children vertices of <paramref name="parent"/> vertex.
            </summary>
            <param name="parent">Parent vertex.</param>
            <param name="children">Vertices to add as children.</param>
            <returns>The number of vertices added to the graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="children"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">At least on of <paramref name="children"/> already has a parent vertex.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="parent"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ICompoundGraph`2.GetParent(`0)">
            <summary>
            Gets the parent vertex of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get the parent.</param>
            <returns>Parent vertex if there is one, <see langword="null"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ICompoundGraph`2.IsChildVertex(`0)">
            <summary>
            Checks if the given <paramref name="vertex"/> is a child vertex of another one.
            </summary>
            <param name="vertex">Vertex to check.</param>
            <returns>True if the vertex is a child one, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ICompoundGraph`2.GetChildrenVertices(`0)">
            <summary>
            Gets the children vertices of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get its children.</param>
            <returns>Children vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ICompoundGraph`2.GetChildrenCount(`0)">
            <summary>
            Gets the number of children vertices of the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get its children count.</param>
            <returns>Number of children vertices.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ICompoundGraph`2.IsCompoundVertex(`0)">
            <summary>
            Checks if the given <paramref name="vertex"/> is a compound vertex (child vertex).
            </summary>
            <param name="vertex">Vertex to check.</param>
            <returns>True if the vertex is a compound one, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="T:GraphShape.IHierarchicalBidirectionalGraph`2">
            <summary>
            Represents a hierarchical bidirectional graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:GraphShape.IHierarchicalBidirectionalGraph`2.HierarchicalEdges">
            <summary>
            Gets the set of hierarchical edges.
            </summary>
        </member>
        <member name="P:GraphShape.IHierarchicalBidirectionalGraph`2.HierarchicalEdgeCount">
            <summary>
            Gets the number of hierarchical edges.
            </summary>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.HierarchicalEdgesFor(`0)">
            <summary>
            Gets the set of hierarchical edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get hierarchical edges.</param>
            <returns>Hierarchical edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.HierarchicalEdgeCountFor(`0)">
            <summary>
            Gets the number of hierarchical edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get hierarchical edges.</param>
            <returns>Hierarchical edges count.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.InHierarchicalEdges(`0)">
            <summary>
            Gets the set of hierarchical in-edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get hierarchical in-edges.</param>
            <returns>Hierarchical in-edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.InHierarchicalEdgeCount(`0)">
            <summary>
            Gets the number of hierarchical in-edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get hierarchical in-edges.</param>
            <returns>Hierarchical in-edges count.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.OutHierarchicalEdges(`0)">
            <summary>
            Gets the set of hierarchical out-edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get hierarchical out-edges.</param>
            <returns>Hierarchical out-edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.OutHierarchicalEdgeCount(`0)">
            <summary>
            Gets the number of hierarchical out-edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get hierarchical out-edges.</param>
            <returns>Hierarchical out-edges count.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="P:GraphShape.IHierarchicalBidirectionalGraph`2.GeneralEdges">
            <summary>
            Gets the set of general edges.
            </summary>
        </member>
        <member name="P:GraphShape.IHierarchicalBidirectionalGraph`2.GeneralEdgeCount">
            <summary>
            Gets the number of general edges.
            </summary>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.GeneralEdgesFor(`0)">
            <summary>
            Gets the set of general edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get general edges.</param>
            <returns>General edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.GeneralEdgeCountFor(`0)">
            <summary>
            Gets the number of general edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get general edges.</param>
            <returns>General edges count.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.InGeneralEdges(`0)">
            <summary>
            Gets the set of general in-edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get general in-edges.</param>
            <returns>General in-edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.InGeneralEdgeCount(`0)">
            <summary>
            Gets the number of general in-edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get general in-edges.</param>
            <returns>General in-edges count.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.OutGeneralEdges(`0)">
            <summary>
            Gets the set of general out-edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get general out-edges.</param>
            <returns>General out-edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.IHierarchicalBidirectionalGraph`2.OutGeneralEdgeCount(`0)">
            <summary>
            Gets the number of general out-edges for the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to get general out-edges.</param>
            <returns>General out-edges count.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="T:GraphShape.IMutableCompoundGraph`2">
            <summary>
            Represents a mutable graph with parent/children relationships between vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="T:GraphShape.ISoftMutableGraph`2">
            <summary>
            Bidirectional graph with soft mutability behavior.
            Soft mutation means that we can hide some vertices or edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="P:GraphShape.ISoftMutableGraph`2.HiddenVertices">
            <summary>
            Gets the set of hidden vertices.
            </summary>
        </member>
        <member name="P:GraphShape.ISoftMutableGraph`2.HiddenVertexCount">
            <summary>
            Gets the number of hidden vertices.
            </summary>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HideVertex(`0)">
            <summary>
            Hides the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to hide.</param>
            <returns>True if the vertex is hidden, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HideVertex(`0,System.String)">
            <summary>
            Hides the given <paramref name="vertex"/>, and gives a <paramref name="tag"/> associated to this hidden vertex.
            </summary>
            <param name="vertex">Vertex to hide.</param>
            <param name="tag">Tag associated to the hidden vertex.</param>
            <returns>True if the vertex is hidden, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HideVertices(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Hides the given set of <paramref name="vertices"/>.
            </summary>
            <param name="vertices">Vertices to hide.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertices"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
            <exception cref="T:QuikGraph.VertexNotFoundException">
            At least one of <paramref name="vertices"/> is not part of the graph.
            </exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HideVertices(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>
            Hides the given set of <paramref name="vertices"/>, and gives a <paramref name="tag"/> associated to these hidden vertices.
            </summary>
            <param name="vertices">Vertices to hide.</param>
            <param name="tag">Tag associated to the hidden vertices.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="vertices"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
            <exception cref="T:QuikGraph.VertexNotFoundException">
            At least one of <paramref name="vertices"/> is not part of the graph.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HideVerticesIf(System.Predicate{`0},System.String)">
            <summary>
            Hides vertices matching the given <paramref name="predicate"/>, and gives a <paramref name="tag"/> associated to these hidden vertices.
            </summary>
            <param name="predicate">Hide predicate.</param>
            <param name="tag">Tag associated to the hidden vertices.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.IsHiddenVertex(`0)">
            <summary>
            Checks if the given <paramref name="vertex"/> is hidden.
            </summary>
            <param name="vertex">Vertex to check.</param>
            <returns>True if the vertex is hidden, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.UnhideVertex(`0)">
            <summary>
            Un-hides the given <paramref name="vertex"/> if it is hidden.
            </summary>
            <param name="vertex">Vertex to un-hide.</param>
            <returns>True if the vertex has been un-hidden, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.UnhideVertexAndEdges(`0)">
            <summary>
            Un-hides the given <paramref name="vertex"/> and its connected edges if they are hidden.
            </summary>
            <param name="vertex">Vertex to un-hide.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="P:GraphShape.ISoftMutableGraph`2.HiddenEdges">
            <summary>
            Gets the set of hidden edges.
            </summary>
        </member>
        <member name="P:GraphShape.ISoftMutableGraph`2.HiddenEdgeCount">
            <summary>
            Gets the number of hidden edges.
            </summary>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HideEdge(`1)">
            <summary>
            Hides the given <paramref name="edge"/>.
            </summary>
            <param name="edge">Edge to hide.</param>
            <returns>True if the edge is hidden, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HideEdge(`1,System.String)">
            <summary>
            Hides the given <paramref name="edge"/>, and gives a <paramref name="tag"/> associated to this hidden edge.
            </summary>
            <param name="edge">Edge to hide.</param>
            <param name="tag">Tag associated to the hidden edge.</param>
            <returns>True if the edge is hidden, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HideEdges(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Hides the given set of <paramref name="edges"/>.
            </summary>
            <param name="edges">Edges to hide.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HideEdges(System.Collections.Generic.IEnumerable{`1},System.String)">
            <summary>
            Hides the given set of <paramref name="edges"/>, and gives a <paramref name="tag"/> associated to this hidden edges.
            </summary>
            <param name="edges">Edges to hide.</param>
            <param name="tag">Tag associated to the hidden edges.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HideEdgesIf(System.Predicate{`1},System.String)">
            <summary>
            Hides edges matching the given <paramref name="predicate"/>, and gives a <paramref name="tag"/> associated to these hidden edges.
            </summary>
            <param name="predicate">Hide predicate.</param>
            <param name="tag">Tag associated to the hidden edges.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.IsHiddenEdge(`1)">
            <summary>
            Checks if the given <paramref name="edge"/> is hidden.
            </summary>
            <param name="edge">Edge to check.</param>
            <returns>True if the edge is hidden, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.UnhideEdge(`1)">
            <summary>
            Un-hides the given <paramref name="edge"/> if it is hidden.
            </summary>
            <param name="edge">Edge to un-hide.</param>
            <returns>True if the edge has been un-hidden, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="edge"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.UnhideEdges(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Un-hides the given <paramref name="edges"/> if they are hidden.
            </summary>
            <param name="edges">Edges to un-hide.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="edges"/> is <see langword="null"/> or at least one of them is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.UnhideEdgesIf(System.Predicate{`1})">
            <summary>
            Un-hides edges matching the given <paramref name="predicate"/>.
            </summary>
            <param name="predicate">Un-hide predicate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="predicate"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HiddenEdgesOf(`0)">
            <summary>
            Gets the hidden edges connected to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to check.</param>
            <returns>Hidden edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.HiddenEdgeCountOf(`0)">
            <summary>
            Gets the number of hidden edges connected to the given <paramref name="vertex"/>.
            </summary>
            <param name="vertex">Vertex to check.</param>
            <returns>Number of hidden edges.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
            <exception cref="T:QuikGraph.VertexNotFoundException"><paramref name="vertex"/> is not part of the graph.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.Unhide(System.String)">
            <summary>
            Un-hides all vertices and edges that were hidden with the given <paramref name="tag"/>.
            </summary>
            <param name="tag">Tag to un-hide.</param>
            <returns>True if the tag has been un-hidden, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.ISoftMutableGraph`2.UnhideAll">
            <summary>
            Un-hides all hidden vertices and edges.
            </summary>
            <returns>True if operation succeed, false otherwise.</returns>
        </member>
        <member name="T:GraphShape.Point">
            <summary>
            Represents an x and y coordinate pair in 2D space.
            </summary>
        </member>
        <member name="P:GraphShape.Point.X">
            <summary>
            X.
            </summary>
        </member>
        <member name="P:GraphShape.Point.Y">
            <summary>
            Y.
            </summary>
        </member>
        <member name="M:GraphShape.Point.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X value.</param>
            <param name="y">Y value.</param>
        </member>
        <member name="M:GraphShape.Point.op_Equality(GraphShape.Point,GraphShape.Point)">
            <summary>
            Indicates whether both <see cref="T:GraphShape.Point"/> are equal.
            </summary>
            <param name="point1">First <see cref="T:GraphShape.Point"/> to compare.</param>
            <param name="point2">Second <see cref="T:GraphShape.Point"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Point"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Point.op_Inequality(GraphShape.Point,GraphShape.Point)">
            <summary>
            Indicates whether both <see cref="T:GraphShape.Point"/> are not equal.
            </summary>
            <param name="point1">First <see cref="T:GraphShape.Point"/> to compare.</param>
            <param name="point2">Second <see cref="T:GraphShape.Point"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Point"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Point.Equals(GraphShape.Point,GraphShape.Point)">
            <summary>
            Compares the two specified <see cref="T:GraphShape.Point"/>s for equality.
            </summary>
            <param name="point1">The first <see cref="T:GraphShape.Point"/> to compare.</param>
            <param name="point2">The second <see cref="T:GraphShape.Point"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Point"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Point.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Point.Equals(GraphShape.Point)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Point.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Point.ToString">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Point.op_Addition(GraphShape.Point,GraphShape.Vector)">
            <summary>
            Translates the specified <see cref="T:GraphShape.Point" /> by the specified <see cref="T:GraphShape.Vector" /> and returns the result.
            </summary>
            <param name="point">The point to translate.</param>
            <param name="vector">The amount by which to translate <paramref name="point" />.</param>
            <returns>The result of translating the specified point by the specified vector.</returns>
        </member>
        <member name="M:GraphShape.Point.op_Subtraction(GraphShape.Point,GraphShape.Vector)">
            <summary>
            Subtracts the specified <see cref="T:GraphShape.Vector" /> from the specified <see cref="T:GraphShape.Point" /> and returns the resulting <see cref="T:GraphShape.Point" />.
            </summary>
            <param name="point">The point from which <paramref name="vector" /> is subtracted.</param>
            <param name="vector">The vector to subtract from <paramref name="point" />.</param>
            <returns>The difference between <paramref name="point" /> and <paramref name="vector" />.</returns>
        </member>
        <member name="M:GraphShape.Point.op_Subtraction(GraphShape.Point,GraphShape.Point)">
            <summary>
            Subtracts the specified <see cref="T:GraphShape.Point" /> from another specified <see cref="T:GraphShape.Point" /> and returns the difference as a <see cref="T:GraphShape.Vector" />.
            </summary>
            <param name="point1">The point from which <paramref name="point2" /> is subtracted.</param>
            <param name="point2">The point to subtract from <paramref name="point1" />.</param>
            <returns>The difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
        </member>
        <member name="T:GraphShape.Rect">
            <summary>
            Represents a rectangle.
            </summary>
        </member>
        <member name="F:GraphShape.Rect.Empty">
            <summary>
            Empty rectangle.
            </summary>
        </member>
        <member name="P:GraphShape.Rect.X">
            <summary>
            X-axis value of the left side of the rectangle.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to update an empty <see cref="T:GraphShape.Rect"/>.</exception>
        </member>
        <member name="P:GraphShape.Rect.Y">
            <summary>
            Y-axis value of the top side of the rectangle.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to update an empty <see cref="T:GraphShape.Rect"/>.</exception>
        </member>
        <member name="P:GraphShape.Rect.Width">
            <summary>
            Width of the rectangle.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to update an empty <see cref="T:GraphShape.Rect"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Rect.Height">
            <summary>
            Height of the rectangle.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to update an empty <see cref="T:GraphShape.Rect"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="M:GraphShape.Rect.#ctor(GraphShape.Point,GraphShape.Size)">
            <summary>
            Constructor.
            </summary>
            <param name="location">A point that specifies the location of the top-left corner of the rectangle.</param>
            <param name="size">A <see cref="P:GraphShape.Rect.Size" /> structure that specifies the width and height of the rectangle.</param>
        </member>
        <member name="M:GraphShape.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <exception cref="T:System.ArgumentException"><paramref name="width"/> or <paramref name="height"/> is negative.</exception>
        </member>
        <member name="P:GraphShape.Rect.IsEmpty">
            <summary>
            Indicates if this rectangle is empty.
            </summary>
        </member>
        <member name="M:GraphShape.Rect.op_Equality(GraphShape.Rect,GraphShape.Rect)">
            <summary>
            Indicates whether both <see cref="T:GraphShape.Rect"/> are equal.
            </summary>
            <param name="rect1">First <see cref="T:GraphShape.Rect"/> to compare.</param>
            <param name="rect2">Second <see cref="T:GraphShape.Rect"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Rect"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Rect.op_Inequality(GraphShape.Rect,GraphShape.Rect)">
            <summary>
            Indicates whether both <see cref="T:GraphShape.Rect"/> are not equal.
            </summary>
            <param name="rect1">First <see cref="T:GraphShape.Rect"/> to compare.</param>
            <param name="rect2">Second <see cref="T:GraphShape.Rect"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Rect"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Rect.Equals(GraphShape.Rect,GraphShape.Rect)">
            <summary>
            Compares the two specified <see cref="T:GraphShape.Rect"/>s for equality.
            </summary>
            <param name="rect1">The first <see cref="T:GraphShape.Rect"/> to compare.</param>
            <param name="rect2">The second <see cref="T:GraphShape.Rect"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Rect"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Rect.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Rect.Equals(GraphShape.Rect)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Rect.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Rect.ToString">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Rect.Location">
            <summary>
            The position of the top-left corner of the rectangle.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to update an empty <see cref="T:GraphShape.Rect"/>.</exception>
        </member>
        <member name="P:GraphShape.Rect.Size">
            <summary>
            The width and height of the rectangle.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to update an empty <see cref="T:GraphShape.Rect"/>.</exception>
        </member>
        <member name="P:GraphShape.Rect.Left">
            <summary>
            Gets the x-axis value of the left side of the rectangle.
            </summary>
        </member>
        <member name="P:GraphShape.Rect.Top">
            <summary>
            Gets the y-axis position of the top of the rectangle.
            </summary>
        </member>
        <member name="P:GraphShape.Rect.Right">
            <summary>
            Gets the x-axis value of the right side of the rectangle.
            </summary>
        </member>
        <member name="P:GraphShape.Rect.Bottom">
            <summary>
            Gets the y-axis value of the bottom of the rectangle.
            </summary>
        </member>
        <member name="P:GraphShape.Rect.TopLeft">
            <summary>
            Gets the position of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:GraphShape.Rect.TopRight">
            <summary>
            Gets the position of the top-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:GraphShape.Rect.BottomLeft">
            <summary>
            Gets the position of the bottom-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:GraphShape.Rect.BottomRight">
            <summary>
            Gets the position of the bottom-right corner of the rectangle.
            </summary>
        </member>
        <member name="M:GraphShape.Rect.IntersectsWith(GraphShape.Rect)">
            <summary>
            Indicates whether the specified rectangle intersects with the current rectangle.
            </summary>
            <param name="rect">The rectangle to check.</param>
            <returns>True if the specified rectangle intersects with the current rectangle, false otherwise.</returns>
        </member>
        <member name="M:GraphShape.Rect.Intersect(GraphShape.Rect)">
            <summary>
            Intersects this rectangle with <paramref name="rect"/> and updates to be the intersection
            of this and <paramref name="rect"/>. If either this or <paramref name="rect"/> are <see cref="F:GraphShape.Rect.Empty"/>,
            the result is <see cref="F:GraphShape.Rect.Empty"/> as well.
            </summary>
            <param name="rect">The rect to intersect with this.</param>
        </member>
        <member name="M:GraphShape.Rect.Offset(System.Double,System.Double)">
            <summary>
            Moves the rectangle by the specified horizontal and vertical amounts.
            </summary>
            <param name="offsetX">The amount to move the rectangle horizontally.</param>
            <param name="offsetY">The amount to move the rectangle vertically.</param>
            <exception cref="T:System.InvalidOperationException">If trying to update an empty <see cref="T:GraphShape.Rect"/>.</exception>
        </member>
        <member name="T:GraphShape.Size">
            <summary>
            Represents the size of an object.
            </summary>
        </member>
        <member name="F:GraphShape.Size.Empty">
            <summary>
            Empty size.
            </summary>
        </member>
        <member name="P:GraphShape.Size.Width">
            <summary>
            Width.
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to update an empty <see cref="T:GraphShape.Size"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="P:GraphShape.Size.Height">
            <summary>
            Height
            </summary>
            <exception cref="T:System.InvalidOperationException">If trying to update an empty <see cref="T:GraphShape.Size"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Value is negative.</exception>
        </member>
        <member name="M:GraphShape.Size.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <exception cref="T:System.ArgumentException"><paramref name="width"/> or <paramref name="height"/> is negative.</exception>
        </member>
        <member name="P:GraphShape.Size.IsEmpty">
            <summary>
            Indicates if this size is empty.
            </summary>
        </member>
        <member name="M:GraphShape.Size.op_Equality(GraphShape.Size,GraphShape.Size)">
            <summary>
            Indicates whether both <see cref="T:GraphShape.Size"/> are equal.
            </summary>
            <param name="size1">First <see cref="T:GraphShape.Size"/> to compare.</param>
            <param name="size2">Second <see cref="T:GraphShape.Size"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Size"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Size.op_Inequality(GraphShape.Size,GraphShape.Size)">
            <summary>
            Indicates whether both <see cref="T:GraphShape.Size"/> are not equal.
            </summary>
            <param name="size1">First <see cref="T:GraphShape.Size"/> to compare.</param>
            <param name="size2">Second <see cref="T:GraphShape.Size"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Size"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Size.Equals(GraphShape.Size,GraphShape.Size)">
            <summary>
            Compares the two specified <see cref="T:GraphShape.Vector"/>s for equality.
            </summary>
            <param name="size1">The first <see cref="T:GraphShape.Vector"/> to compare.</param>
            <param name="size2">The second <see cref="T:GraphShape.Vector"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Vector"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Size.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Size.Equals(GraphShape.Size)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Size.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Size.ToString">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Thickness">
            <summary>
            Represents the thickness of an object.
            </summary>
        </member>
        <member name="F:GraphShape.Thickness.Left">
            <summary>
            Left bound value.
            </summary>
        </member>
        <member name="F:GraphShape.Thickness.Top">
            <summary>
            Top bound value.
            </summary>
        </member>
        <member name="F:GraphShape.Thickness.Right">
            <summary>
            Right bound value.
            </summary>
        </member>
        <member name="F:GraphShape.Thickness.Bottom">
            <summary>
            Bottom bound value.
            </summary>
        </member>
        <member name="M:GraphShape.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="left">Left bound value.</param>
            <param name="top">Top bound value.</param>
            <param name="right">Right bound value.</param>
            <param name="bottom">Bottom bound value.</param>
        </member>
        <member name="M:GraphShape.Thickness.op_Equality(GraphShape.Thickness,GraphShape.Thickness)">
            <summary>
            Indicates whether both <see cref="T:GraphShape.Thickness"/> are equal.
            </summary>
            <param name="thickness1">First <see cref="T:GraphShape.Thickness"/> to compare.</param>
            <param name="thickness2">Second <see cref="T:GraphShape.Thickness"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Thickness"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Thickness.op_Inequality(GraphShape.Thickness,GraphShape.Thickness)">
            <summary>
            Indicates whether both <see cref="T:GraphShape.Thickness"/> are not equal.
            </summary>
            <param name="thickness1">First <see cref="T:GraphShape.Thickness"/> to compare.</param>
            <param name="thickness2">Second <see cref="T:GraphShape.Thickness"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Thickness"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Thickness.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Thickness.Equals(GraphShape.Thickness)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Thickness.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Thickness.ToString">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.Vector">
            <summary>
            Represents a displacement in 2D space.
            </summary>
        </member>
        <member name="P:GraphShape.Vector.X">
            <summary>
            X component value.
            </summary>
        </member>
        <member name="P:GraphShape.Vector.Y">
            <summary>
            Y component value.
            </summary>
        </member>
        <member name="M:GraphShape.Vector.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X component value.</param>
            <param name="y">Y component value.</param>
        </member>
        <member name="M:GraphShape.Vector.op_Equality(GraphShape.Vector,GraphShape.Vector)">
            <summary>
            Indicates whether both <see cref="T:GraphShape.Vector"/> are equal.
            </summary>
            <param name="vector1">First <see cref="T:GraphShape.Vector"/> to compare.</param>
            <param name="vector2">Second <see cref="T:GraphShape.Vector"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Vector"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Vector.op_Inequality(GraphShape.Vector,GraphShape.Vector)">
            <summary>
            Indicates whether both <see cref="T:GraphShape.Vector"/> are not equal.
            </summary>
            <param name="vector1">First <see cref="T:GraphShape.Vector"/> to compare.</param>
            <param name="vector2">Second <see cref="T:GraphShape.Vector"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Vector"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Vector.Equals(GraphShape.Vector,GraphShape.Vector)">
            <summary>
            Compares the two specified <see cref="T:GraphShape.Vector"/>s for equality.
            </summary>
            <param name="vector1">The first <see cref="T:GraphShape.Vector"/> to compare.</param>
            <param name="vector2">The second <see cref="T:GraphShape.Vector"/> to compare.</param>
            <returns>True if both <see cref="T:GraphShape.Vector"/> are equal, otherwise false.</returns>
        </member>
        <member name="M:GraphShape.Vector.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Vector.Equals(GraphShape.Vector)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Vector.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Vector.ToString">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.Vector.Length">
            <summary>
            Gets the length of this vector.
            </summary>
            <returns>The length of this vector.</returns>
        </member>
        <member name="P:GraphShape.Vector.LengthSquared">
            <summary>
            Gets the squared length of this vector.
            </summary>
            <returns>The squared length of this vector.</returns>
        </member>
        <member name="M:GraphShape.Vector.Normalize">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:GraphShape.Vector.op_UnaryNegation(GraphShape.Vector)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="vector">The vector to negate.</param>
            <returns>
            A vector with <see cref="P:GraphShape.Vector.X" /> and <see cref="P:GraphShape.Vector.Y" /> values opposite of the <see cref="P:GraphShape.Vector.X" /> and <see cref="P:GraphShape.Vector.Y" /> values of <paramref name="vector" />.
            </returns>
        </member>
        <member name="M:GraphShape.Vector.op_Addition(GraphShape.Vector,GraphShape.Vector)">
            <summary>
            Adds two vectors and returns the result as a vector.
            </summary>
            <param name="vector1">The first vector to add.</param>
            <param name="vector2">The second vector to add.</param>
            <returns>The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
        </member>
        <member name="M:GraphShape.Vector.op_Subtraction(GraphShape.Vector,GraphShape.Vector)">
            <summary>
            Subtracts one specified vector from another.
            </summary>
            <param name="vector1">The vector from which <paramref name="vector2" /> is subtracted.</param>
            <param name="vector2">The vector to subtract from <paramref name="vector1" />.</param>
            <returns>The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
        </member>
        <member name="M:GraphShape.Vector.op_Multiply(GraphShape.Vector,System.Double)">
            <summary>
            Multiplies the specified vector by the specified scalar and returns the resulting vector.
            </summary>
            <param name="vector">The vector to multiply.</param>
            <param name="scalar">The scalar to multiply.</param>
            <returns>The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</returns>
        </member>
        <member name="M:GraphShape.Vector.op_Multiply(System.Double,GraphShape.Vector)">
            <summary>
            Multiplies the specified scalar by the specified vector and returns the resulting vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="vector">The vector to multiply.</param>
            <returns>The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</returns>
        </member>
        <member name="M:GraphShape.Vector.op_Division(GraphShape.Vector,System.Double)">
            <summary>
            Divides the specified vector by the specified scalar and returns the resulting vector.
            </summary>
            <param name="vector">The vector to divide.</param>
            <param name="scalar">The scalar by which <paramref name="vector" /> will be divided.</param>
            <returns>The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</returns>
        </member>
        <member name="M:GraphShape.Vector.op_Multiply(GraphShape.Vector,GraphShape.Vector)">
            <summary>
            Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.
            </summary>
            <param name="vector1">The first vector to multiply.</param>
            <param name="vector2">The second vector to multiply.</param>
            <returns>
            Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" />
            and <paramref name="vector2" />, which is calculated using the following formula:
              vector1.X * vector2.X + vector1.Y * vector2.Y
            </returns>
        </member>
        <member name="T:GraphShape.TypedEdge`1">
            <summary>
            Edge implementation with a <see cref="P:GraphShape.TypedEdge`1.Type"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:GraphShape.TypedEdge`1.Type">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.TypedEdge`1.#ctor(`0,`0,GraphShape.EdgeTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.TypedEdge`1"/> class.
            </summary>
            <param name="source">Source vertex.</param>
            <param name="target">Target vertex.</param>
            <param name="type">Edge type.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.TypedEdge`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.WeightedEdge`1">
            <summary>
            Edge implementation with a weight.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:GraphShape.WeightedEdge`1.Weight">
            <summary>
            Edge weight.
            </summary>
        </member>
        <member name="M:GraphShape.WeightedEdge`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.WeightedEdge`1"/> class.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.WeightedEdge`1.#ctor(`0,`0,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.WeightedEdge`1"/> class.
            </summary>
            <param name="source">The source vertex.</param>
            <param name="target">The target vertex.</param>
            <param name="weight">Edge weight.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.CompoundGraph`2">
            <summary>
            Compound graph data structure.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:GraphShape.CompoundGraph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.CompoundGraph`2"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.CompoundGraph`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.CompoundGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
        </member>
        <member name="M:GraphShape.CompoundGraph`2.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.CompoundGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <param name="capacity">Vertex capacity.</param>
        </member>
        <member name="M:GraphShape.CompoundGraph`2.#ctor(QuikGraph.IEdgeListGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.CompoundGraph`2"/> class.
            </summary>
            <param name="graph">Graph from which initializing this graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.CompoundGraph`2.#ctor(GraphShape.ICompoundGraph{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.CompoundGraph`2"/> class.
            </summary>
            <param name="graph">Graph from which initializing this graph.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:GraphShape.CompoundGraph`2.SimpleVertices">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.CompoundGraph`2.CompoundVertices">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.CompoundGraph`2.AddChildVertex(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.CompoundGraph`2.AddChildVertexRange(`0,System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.CompoundGraph`2.GetParent(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.CompoundGraph`2.IsChildVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.CompoundGraph`2.GetChildrenVertices(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.CompoundGraph`2.GetChildrenCount(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.CompoundGraph`2.IsCompoundVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.CompoundGraph`2.RemoveVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.EdgesFor(`0)">
            <summary>
            Returns every edges connected with the <paramref name="vertex"/>.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>Edges, adjacent to the vertex <code>vertex</code>.</returns>
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.HiddenVertices">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.HiddenVertexCount">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HideVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HideVertex(`0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HideVertices(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HideVertices(System.Collections.Generic.IEnumerable{`0},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HideVerticesIf(System.Predicate{`0},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.IsHiddenVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.UnhideVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.UnhideVertexAndEdges(`0)">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.HiddenEdges">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.HiddenEdgeCount">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HideEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HideEdge(`1,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HideEdges(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HideEdges(System.Collections.Generic.IEnumerable{`1},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HideEdgesIf(System.Predicate{`1},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.IsHiddenEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.UnhideEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.UnhideEdges(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.UnhideEdgesIf(System.Predicate{`1})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HiddenEdgesOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.HiddenEdgeCountOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.Unhide(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.UnhideAll">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.IsDirected">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.AllowParallelEdges">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.ContainsVertex(`0)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.ContainsVertex(`0)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.IsVerticesEmpty">
            <summary>
            <see cref="P:GraphShape.GraphHideHelpers`2.IsVerticesEmpty"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.VertexCount">
            <summary>
            <see cref="P:GraphShape.GraphHideHelpers`2.VertexCount"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.Vertices">
            <summary>
            <see cref="P:GraphShape.GraphHideHelpers`2.Vertices"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.IsEdgesEmpty">
            <summary>
            <see cref="P:GraphShape.GraphHideHelpers`2.IsEdgesEmpty"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.EdgeCount">
            <summary>
            <see cref="P:GraphShape.GraphHideHelpers`2.EdgeCount"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="P:GraphShape.GraphHideHelpers`2.Edges">
            <summary>
            <see cref="P:GraphShape.GraphHideHelpers`2.Edges"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.ContainsEdge(`1)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.ContainsEdge(`1)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.ContainsEdge(`0,`0)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.ContainsEdge(`0,`0)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.IsOutEdgesEmpty(`0)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.IsOutEdgesEmpty(`0)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.OutDegree(`0)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.OutDegree(`0)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.OutEdges(`0)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.OutEdges(`0)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.TryGetOutEdges(`0,System.Collections.Generic.IEnumerable{`1}@)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.OutEdge(`0,System.Int32)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.OutEdge(`0,System.Int32)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.TryGetEdge(`0,`0,`1@)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.TryGetEdge(`0,`0,`1@)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.TryGetEdges(`0,`0,System.Collections.Generic.IEnumerable{`1}@)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.IsInEdgesEmpty(`0)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.IsInEdgesEmpty(`0)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.InDegree(`0)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.InDegree(`0)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.InEdges(`0)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.InEdges(`0)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.TryGetInEdges(`0,System.Collections.Generic.IEnumerable{`1}@)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.InEdge(`0,System.Int32)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.InEdge(`0,System.Int32)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:GraphShape.GraphHideHelpers`2.Degree(`0)">
            <summary>
            <see cref="M:GraphShape.GraphHideHelpers`2.Degree(`0)"/> is not implemented for this helper.
            </summary>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="T:GraphShape.HierarchicalGraph`2">
            <summary>
            Hierarchical graph.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.HierarchicalGraph`2"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.HierarchicalGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.HierarchicalGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <param name="capacity">Vertex capacity.</param>
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.AddVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.RemoveVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.AddEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.RemoveEdge(`1)">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.HierarchicalGraph`2.HierarchicalEdges">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.HierarchicalGraph`2.HierarchicalEdgeCount">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.HierarchicalEdgesFor(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.HierarchicalEdgeCountFor(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.InHierarchicalEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.InHierarchicalEdgeCount(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.OutHierarchicalEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.OutHierarchicalEdgeCount(`0)">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.HierarchicalGraph`2.GeneralEdges">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.HierarchicalGraph`2.GeneralEdgeCount">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.GeneralEdgesFor(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.GeneralEdgeCountFor(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.InGeneralEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.InGeneralEdgeCount(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.OutGeneralEdges(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.HierarchicalGraph`2.OutGeneralEdgeCount(`0)">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.SoftMutableBidirectionalGraph`2">
            <summary>
            Bidirectional graph that implements soft mutability.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.SoftMutableHierarchicalGraph`2"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.SoftMutableHierarchicalGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.SoftMutableHierarchicalGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <param name="capacity">Vertex capacity.</param>
        </member>
        <member name="E:GraphShape.SoftMutableBidirectionalGraph`2.VertexHidden">
            <summary>
            Fired when a vertex has been hidden.
            </summary>
        </member>
        <member name="E:GraphShape.SoftMutableBidirectionalGraph`2.VertexUnhidden">
            <summary>
            Fired when a vertex has been unhidden.
            </summary>
        </member>
        <member name="E:GraphShape.SoftMutableBidirectionalGraph`2.EdgeHidden">
            <summary>
            Fired when an edge has been hidden.
            </summary>
        </member>
        <member name="E:GraphShape.SoftMutableBidirectionalGraph`2.EdgeUnhidden">
            <summary>
            Fired when an edge has been unhidden.
            </summary>
        </member>
        <member name="P:GraphShape.SoftMutableBidirectionalGraph`2.HiddenVertices">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.SoftMutableBidirectionalGraph`2.HiddenVertexCount">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HideVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HideVertex(`0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HideVertices(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HideVertices(System.Collections.Generic.IEnumerable{`0},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HideVerticesIf(System.Predicate{`0},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.IsHiddenVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.UnhideVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.UnhideVertexAndEdges(`0)">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.SoftMutableBidirectionalGraph`2.HiddenEdges">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.SoftMutableBidirectionalGraph`2.HiddenEdgeCount">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HideEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HideEdge(`1,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HideEdges(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HideEdges(System.Collections.Generic.IEnumerable{`1},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HideEdgesIf(System.Predicate{`1},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.IsHiddenEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.UnhideEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.UnhideEdges(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.UnhideEdgesIf(System.Predicate{`1})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HiddenEdgesOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.HiddenEdgeCountOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.Unhide(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableBidirectionalGraph`2.UnhideAll">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.SoftMutableHierarchicalGraph`2">
            <summary>
            Hierarchical graph that implements soft mutability.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.SoftMutableHierarchicalGraph`2"/> class.
            </summary>
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.SoftMutableHierarchicalGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.SoftMutableHierarchicalGraph`2"/> class.
            </summary>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <param name="capacity">Vertex capacity.</param>
        </member>
        <member name="E:GraphShape.SoftMutableHierarchicalGraph`2.VertexHidden">
            <summary>
            Fired when a vertex has been hidden.
            </summary>
        </member>
        <member name="E:GraphShape.SoftMutableHierarchicalGraph`2.VertexUnhidden">
            <summary>
            Fired when a vertex has been unhidden.
            </summary>
        </member>
        <member name="E:GraphShape.SoftMutableHierarchicalGraph`2.EdgeHidden">
            <summary>
            Fired when an edge has been hidden.
            </summary>
        </member>
        <member name="E:GraphShape.SoftMutableHierarchicalGraph`2.EdgeUnhidden">
            <summary>
            Fired when an edge has been unhidden.
            </summary>
        </member>
        <member name="P:GraphShape.SoftMutableHierarchicalGraph`2.HiddenVertices">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.SoftMutableHierarchicalGraph`2.HiddenVertexCount">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HideVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HideVertex(`0,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HideVertices(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HideVertices(System.Collections.Generic.IEnumerable{`0},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HideVerticesIf(System.Predicate{`0},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.IsHiddenVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.UnhideVertex(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.UnhideVertexAndEdges(`0)">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.SoftMutableHierarchicalGraph`2.HiddenEdges">
            <inheritdoc />
        </member>
        <member name="P:GraphShape.SoftMutableHierarchicalGraph`2.HiddenEdgeCount">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HideEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HideEdge(`1,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HideEdges(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HideEdges(System.Collections.Generic.IEnumerable{`1},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HideEdgesIf(System.Predicate{`1},System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.IsHiddenEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.UnhideEdge(`1)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.UnhideEdges(System.Collections.Generic.IEnumerable{`1})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.UnhideEdgesIf(System.Predicate{`1})">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HiddenEdgesOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.HiddenEdgeCountOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.Unhide(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.SoftMutableHierarchicalGraph`2.UnhideAll">
            <inheritdoc />
        </member>
        <member name="T:GraphShape.WrappedVertex`1">
            <summary>
            Vertex wrapper.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
        </member>
        <member name="P:GraphShape.WrappedVertex`1.Original">
            <summary>
            Wrapped vertex.
            </summary>
        </member>
        <member name="M:GraphShape.WrappedVertex`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphShape.WrappedVertex`1"/> class.
            </summary>
            <param name="original">Vertex to wrap.</param>
        </member>
        <member name="T:GraphShape.Utils.GraphHelpers">
            <summary>
            Helpers to deal with graphs.
            </summary>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.GetNeighbors``2(QuikGraph.IBidirectionalGraph{``0,``1},``0)">
            <summary>
            Gets the neighbors (adjacent vertices) of the <paramref name="vertex"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph.</param>
            <param name="vertex">The vertex of which we want to get neighbors.</param>
            <returns>Adjacent vertices of the <paramref name="vertex"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.GetOutNeighbors``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1},``0)">
            <summary>
            Gets the out neighbors (only adjacent vertices from out-edges) of the <paramref name="vertex"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph.</param>
            <param name="vertex">The vertex of which we want to get neighbors.</param>
            <returns>Adjacent vertices of the <paramref name="vertex"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertex"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.GetEdgesBetween``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1},``0[],``0[])">
            <summary>
            Returns every edges which source is one of the vertices in the <paramref name="set1"/>
            and the target is one of the vertices in the <paramref name="set2"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">The graph.</param>
            <param name="set1">Source vertices set.</param>
            <param name="set2">Target vertices set</param>
            <returns>Edges with a source in <paramref name="set1"/> and a target in <paramref name="set2"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="set1"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="set2"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.GetDistances``3(``2)">
            <summary>
            Gets the distances between the vertices of the <paramref name="graph"/>.
            Note: The distance is the number of edges between 2 vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <param name="graph">The graph.</param>
            <returns>The distances between every vertex-pair.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.GetDiameter``3(``2)">
            <summary>
            Gets the diameter of the <paramref name="graph"/>.
            Note: The diameter is the greatest distance between two vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <param name="graph">The graph.</param>
            <returns>The diameter of the <paramref name="graph"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.GetDiameter``3(``2,System.Double[0:,0:]@)">
            <summary>
            Gets the diameter of the <paramref name="graph"/>.
            Note: The diameter is the greatest distance between two vertices.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TGraph">Graph type.</typeparam>
            <param name="graph">The graph.</param>
            <param name="distances">Will give distances between every vertex-pair.</param>
            <returns>The diameter of the <paramref name="graph"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.CreateGraph``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.String,System.String)">
            <summary>
            Creates a <see cref="T:QuikGraph.BidirectionalGraph{TVertex,TEdge}"/> with the given <paramref name="vertices"/>
            and edges constructed by getting values of properties <paramref name="sourcePropertyName"/>
            and <paramref name="targetPropertyName"/> on type <typeparamref name="TEdgeData"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdgeData">Type of the object used to construct edges.</typeparam>
            <param name="vertices">The set of the vertices.</param>
            <param name="edgesData">The set of data used to construct graph edges.</param>
            <param name="sourcePropertyName">
            Name of the property to get value from <typeparamref name="TEdgeData"/> to construct edge source.
            </param>
            <param name="targetPropertyName">
            Name of the property to get value from <typeparamref name="TEdgeData"/> to construct edge target.
            </param>
            <returns>A <see cref="T:QuikGraph.BidirectionalGraph{TVertex,TEdge}"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgesData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="sourcePropertyName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="targetPropertyName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">
            Edge property <paramref name="sourcePropertyName"/> and/or <paramref name="targetPropertyName"/> has <see langword="null"/> value.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="sourcePropertyName"/> is not the name of a property of type <typeparamref name="TEdgeData"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="targetPropertyName"/> is not the name of a property of type <typeparamref name="TEdgeData"/>.</exception>
            <exception cref="T:System.ArgumentException">
            Edge property <paramref name="sourcePropertyName"/> and/or <paramref name="targetPropertyName"/> has a type that is not assignable to <typeparamref name="TVertex"/>.
            </exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.CreateGraph``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``2},System.Func{``2,``1},System.Boolean)">
            <summary>
            Creates a <see cref="T:QuikGraph.BidirectionalGraph{TVertex,TEdgeTo}"/> with the given <paramref name="vertices"/>
            and edges constructed using <paramref name="edgeFactory"/>.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TEdgeData">Type of the object used to construct edges.</typeparam>
            <param name="vertices">The set of the vertices.</param>
            <param name="edgesData">The set of data used to construct graph edges.</param>
            <param name="edgeFactory">Factory method to convert an edge data into an edge.</param>
            <param name="allowParallelEdges">Indicates if parallel edges are allowed.</param>
            <returns>A <see cref="T:QuikGraph.BidirectionalGraph{TVertex,TEdge}"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgesData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/> or creates <see langword="null"/> edge.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.CreateGraph``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``2},System.Func{``2,``1})">
            <summary>
            Creates a <see cref="T:QuikGraph.BidirectionalGraph{TVertex,TEdgeTo}"/> with the given <paramref name="vertices"/>
            and edges constructed using <paramref name="edgeFactory"/>.
            Note: The graph will allow parallel edges.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <typeparam name="TEdgeData">Type of the object used to construct edges.</typeparam>
            <param name="vertices">The set of the vertices.</param>
            <param name="edgesData">The set of data used to construct graph edges.</param>
            <param name="edgeFactory">Factory method to convert an edge data into an edge.</param>
            <returns>A <see cref="T:QuikGraph.BidirectionalGraph{TVertex,TEdge}"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="vertices"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgesData"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="edgeFactory"/> is <see langword="null"/> or creates <see langword="null"/> edge.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.Convert``5(QuikGraph.IVertexAndEdgeListGraph{``0,``1},``4,System.Func{``0,``2},System.Func{``1,``3})">
            <summary>
            Converts the <paramref name="oldGraph"/> into the <paramref name="newGraph"/>.
            Uses <paramref name="vertexConverter"/> and <paramref name="edgeConverter"/> to
            convert vertices and edges if provided. Performs a direct cast otherwise.
            </summary>
            <typeparam name="TOldVertex">Old vertex type.</typeparam>
            <typeparam name="TNewVertex">New vertex type.</typeparam>
            <typeparam name="TOldEdge">Old edge type.</typeparam>
            <typeparam name="TNewEdge">New edge type.</typeparam>
            <typeparam name="TNewGraph">Converted graph type.</typeparam>
            <param name="oldGraph">Graph to convert.</param>
            <param name="newGraph">Graph that will be filled with converted content.</param>
            <param name="vertexConverter">Function to convert vertices from <typeparamref name="TOldVertex"/> to <typeparamref name="TNewVertex"/>.</param>
            <param name="edgeConverter">Function to convert edges from <typeparamref name="TOldEdge"/> to <typeparamref name="TNewEdge"/>.</param>
            <returns>The converted graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="newGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.Convert``4(QuikGraph.IVertexAndEdgeListGraph{``0,``1},``3,System.Func{``1,``2})">
            <summary>
            Converts the <paramref name="oldGraph"/> into the <paramref name="newGraph"/>.
            Uses <paramref name="edgeConverter"/> to convert edges if provided. Performs a direct cast otherwise.
            </summary>
            <typeparam name="TVertex">Old vertex type.</typeparam>
            <typeparam name="TOldEdge">Old edge type.</typeparam>
            <typeparam name="TNewEdge">New edge type.</typeparam>
            <typeparam name="TNewGraph">Converted graph type.</typeparam>
            <param name="oldGraph">Graph to convert.</param>
            <param name="newGraph">Graph that will be filled with converted content.</param>
            <param name="edgeConverter">Function to convert edges from <typeparamref name="TOldEdge"/> to <typeparamref name="TNewEdge"/>.</param>
            <returns>The converted graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="newGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.Convert``3(QuikGraph.IVertexAndEdgeListGraph{``0,``1},``2)">
            <summary>
            Converts the <paramref name="oldGraph"/> into the <paramref name="newGraph"/>.
            </summary>
            <typeparam name="TVertex">Old vertex type.</typeparam>
            <typeparam name="TEdge">Old edge type.</typeparam>
            <typeparam name="TNewGraph">Converted graph type.</typeparam>
            <param name="oldGraph">Graph to convert.</param>
            <param name="newGraph">Graph that will be filled with converted content.</param>
            <returns>The converted graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldGraph"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="newGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.Convert``4(QuikGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``0,``2},System.Func{``1,``3})">
            <summary>
            Converts the <paramref name="oldGraph"/> into a <see cref="T:QuikGraph.BidirectionalGraph{TVertex,TEdge}"/>.
            Uses <paramref name="vertexConverter"/> and <paramref name="edgeConverter"/> to
            convert vertices and edges if provided. Performs a direct cast otherwise.
            </summary>
            <typeparam name="TOldVertex">Old vertex type.</typeparam>
            <typeparam name="TNewVertex">New vertex type.</typeparam>
            <typeparam name="TOldEdge">Old edge type.</typeparam>
            <typeparam name="TNewEdge">New edge type.</typeparam>
            <param name="oldGraph">Graph to convert.</param>
            <param name="vertexConverter">Function to convert vertices from <typeparamref name="TOldVertex"/> to <typeparamref name="TNewVertex"/>.</param>
            <param name="edgeConverter">Function to convert edges from <typeparamref name="TOldEdge"/> to <typeparamref name="TNewEdge"/>.</param>
            <returns>The converted graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.Convert``3(QuikGraph.IVertexAndEdgeListGraph{``0,``1},System.Func{``1,``2})">
            <summary>
            Converts the <paramref name="oldGraph"/> into a <see cref="T:QuikGraph.BidirectionalGraph{TVertex,TEdge}"/>.
            Uses <paramref name="edgeConverter"/> to convert edges if provided. Performs a direct cast otherwise.
            </summary>
            <typeparam name="TVertex">Old vertex type.</typeparam>
            <typeparam name="TOldEdge">Old edge type.</typeparam>
            <typeparam name="TNewEdge">New edge type.</typeparam>
            <param name="oldGraph">Graph to convert.</param>
            <param name="edgeConverter">Function to convert edges from <typeparamref name="TOldEdge"/> to <typeparamref name="TNewEdge"/>.</param>
            <returns>The converted graph.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldGraph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:GraphShape.Utils.GraphHelpers.CopyToBidirectionalGraph``2(QuikGraph.IVertexAndEdgeListGraph{``0,``1})">
            <summary>
            Copies this graph into a <see cref="T:QuikGraph.BidirectionalGraph{TVertex,TEdge}"/> one.
            </summary>
            <typeparam name="TVertex">Vertex type.</typeparam>
            <typeparam name="TEdge">Edge type.</typeparam>
            <param name="graph">Graph to copy.</param>
            <returns><see cref="T:QuikGraph.BidirectionalGraph{TVertex,TEdge}"/> initialized from <paramref name="graph"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="graph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:GraphShape.Utils.MathUtils">
            <summary>
            Math utilities.
            </summary>
        </member>
        <member name="F:GraphShape.Utils.MathUtils.DoubleEpsilon">
            <summary>
            Smallest value such that 1.0+<see cref="F:GraphShape.Utils.MathUtils.DoubleEpsilon"/> != 1.0
            </summary>
        </member>
        <member name="M:GraphShape.Utils.MathUtils.IsZero(System.Double)">
            <summary>
            Returns whether or not the double is "close" to 0, but this is faster.
            </summary>
            <returns>The result of the comparision.</returns>
            <param name="a">The double to compare to 0.</param>
        </member>
        <member name="M:GraphShape.Utils.MathUtils.NearEqual(System.Single,System.Single)">
            <summary>
            Returns whether or not two <see cref="T:System.Single"/>s are "equal". That is, whether or
            not they are within epsilon of each other.
            </summary>
            <remarks>
            Take into account the magnitude of floating point numbers.
            The code is using the technique described by Bruce Dawson in
            <a href="http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/">Comparing Floating point numbers 2012 edition</a>.
            </remarks>
            <param name="a">The first <see cref="T:System.Single"/> to compare.</param>
            <param name="b">The second <see cref="T:System.Single"/> to compare.</param>
            <returns>The result of the comparision.</returns>
        </member>
        <member name="M:GraphShape.Utils.MathUtils.NearEqual(System.Double,System.Double)">
            <summary>
            Returns whether or not two <see cref="T:System.Double"/>s are "equal". That is, whether or
            not they are within epsilon of each other.
            </summary>
            <param name="a">The first <see cref="T:System.Double"/> to compare.</param>
            <param name="b">The second <see cref="T:System.Double"/> to compare.</param>
            <returns>The result of the comparision.</returns>
        </member>
        <member name="T:GraphShape.Utils.NotifierObject">
            <summary>
            Base class for all objects that are able to notify their property changed.
            </summary>
        </member>
        <member name="E:GraphShape.Utils.NotifierObject.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:GraphShape.Utils.NotifierObject.OnPropertyChanged(System.String)">
            <summary>
            Raises a <see cref="E:GraphShape.Utils.NotifierObject.PropertyChanged"/> event for the given <paramref name="propertyName"/>.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="T:GraphShape.Utils.Pair">
            <summary>
            Weighted pair.
            </summary>
        </member>
        <member name="P:GraphShape.Utils.Pair.First">
            <summary>
            First value.
            </summary>
        </member>
        <member name="P:GraphShape.Utils.Pair.Second">
            <summary>
            Second value.
            </summary>
        </member>
        <member name="P:GraphShape.Utils.Pair.Weight">
            <summary>
            Pair weight.
            </summary>
        </member>
    </members>
</doc>
